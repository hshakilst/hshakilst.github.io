<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss">
  <channel>
    <title>Time on Shakil&#39;s Blog</title>
    <link>http://localhost:1313/tags/time/</link>
    <description>Recent content in Time on Shakil&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Shakil Hossain - All Right Reserved.</copyright>
    <lastBuildDate>Thu, 16 May 2024 12:59:39 +0200</lastBuildDate><atom:link href="http://localhost:1313/tags/time/index.xml" rel="self" type="application/rss+xml" /><icon>http://localhost:1313/logo.svg</icon>
    
    
    <item>
      <title>HTB Sherlock Noted</title>
      <link>http://localhost:1313/posts/htb-sherlocks/noted/</link>
      <pubDate>Thu, 16 May 2024 12:59:39 +0200</pubDate>
      
      <guid>http://localhost:1313/posts/htb-sherlocks/noted/</guid>
      <description><![CDATA[<h1 id="noted-dfir">Noted (DFIR)</h1>
<h3 id="scenario">Scenario</h3>
<p>Simon, a developer working at Forela, notified the CERT team about a note that appeared on his desktop. The note claimed that his system had been compromised and that sensitive data from Simon&rsquo;s workstation had been collected. The perpetrators performed data extortion on his workstation and are now threatening to release the data on the dark web unless their demands are met. Simon&rsquo;s workstation contained multiple sensitive files, including planned software projects, internal development plans, and application codebases. The threat intelligence team believes that the threat actor made some mistakes, but they have not found any way to contact the threat actors. The company&rsquo;s stakeholders are insisting that this incident be resolved and all sensitive data be recovered. They demand that under no circumstances should the data be leaked. As our junior security analyst, you have been assigned a specific type of DFIR (Digital Forensics and Incident Response) investigation in this case. The CERT lead, after triaging the workstation, has provided you with only the Notepad++ artifacts, suspecting that the attacker created the extortion note and conducted other activities with hands-on keyboard access. Your duty is to determine how the attack occurred and find a way to contact the threat actors, as they accidentally locked out their own contact information.</p>
<h3 id="forensics">Forensics</h3>
<ul>
<li>
<p><strong>Artifacts</strong>: The artifacts are from <code>Notepad++</code> software. We have two XML files named <code>config.xml</code> and <code>session.xml</code>. We are also provided with two backup files of two text files <code>LootAndPurge.java@2023-07-24_145332</code> and <code>YOU HAVE BEEN HACKED.txt@2023-07-24_150548</code>.</p>
</li>
<li>
<p><strong>Extraction</strong>: The files were all in plaintext format and the volume of data was low, so extraction was not necessary. However, five files were created for classification purposes. They are <a href="https://github.com/hshakilst/DFIR/blob/main/HTB%20Sherlocks/Noted/file_history.txt">file history of recently opened files</a>, <a href="https://github.com/hshakilst/DFIR/blob/main/HTB%20Sherlocks/Noted/edited_files.txt">edited files in the alleged Notepad++</a>, <a href="https://github.com/hshakilst/DFIR/blob/main/HTB%20Sherlocks/Noted/custom_uris.txt">custom URIs the alleged Notepad++ was set to handle</a>, <a href="https://github.com/hshakilst/DFIR/blob/main/HTB%20Sherlocks/Noted/LootAndPurge.java">malicious data extortion java file</a> and <a href="https://github.com/hshakilst/DFIR/blob/main/HTB%20Sherlocks/Noted/YOU%20HAVE%20BEEN%20HACKED.txt">a ransom note file</a></p>
</li>
<li>
<p><strong>Analysis</strong>:</p>
<p>First, I examined the <code>config.xml</code> file and found some file histories. The history contained the file addresses that were recently opened by the user. I have listed them in the <a href="https://github.com/hshakilst/DFIR/blob/main/HTB%20Sherlocks/Noted/file_history.txt"><code>file_history.txt</code></a> file. Also, I found some custom URIs that were set to handle files from different types of services. They are listed in the <a href="https://github.com/hshakilst/DFIR/blob/main/HTB%20Sherlocks/Noted/custom_uris.txt"><code>custom_uris.txt</code></a> file.</p>
<p>Second, I analyzed the <code>session.xml</code> file and there I found two files that were being edited along with their backup file locations and last modified timestamps. I added them to a file named <a href="https://github.com/hshakilst/DFIR/blob/main/HTB%20Sherlocks/Noted/edited_files.txt"><code>edited_files.txt</code></a> with the findings.</p>
<p>Finally, I inspected the backup files and discovered a malicious <a href="https://github.com/hshakilst/DFIR/blob/main/HTB%20Sherlocks/Noted/LootAndPurge.java">Java source file</a>(LootAndPurge.java) that was used to encrypt the sensitive data and a <a href="https://github.com/hshakilst/DFIR/blob/main/HTB%20Sherlocks/Noted/YOU%20HAVE%20BEEN%20HACKED.txt">ransom note</a> where two <code>Pastebin</code> links were given to contact the cybercriminals. A password for the zip file was left behind by the perpetrators. Which can be used to decrypt the content of the zip file. The same password can be used to decrypt the <code>Pastebin</code> notes to find their Ethereum wallet address and email address.</p>
</li>
</ul>
<h3 id="tools-used">Tools Used</h3>
<ul>
<li>Visual Studio Code</li>
<li>Python3</li>
</ul>
<h3 id="questions-and-answers">Questions and Answers</h3>
<ul>
<li>
<p>Q1: What is the full path of the script used by Simon for AWS operations?</p>
<ul>
<li>A: <code>C:\Users\Simon.stark\Documents\Dev_Ops\AWS_objects migration.pl</code></li>
</ul>
</li>
<li>
<p>Q2: The attacker duplicated some program code and compiled it on the system, knowing that the victim was a software engineer and had all the necessary utilities. They did this to blend into the environment and didn&rsquo;t bring any of their tools. This code gathered sensitive data and prepared it for exfiltration. What is the full path of the program&rsquo;s source file?</p>
<ul>
<li>A: <code>C:\Users\simon.stark\Desktop\LootAndPurge.java</code>.</li>
</ul>
</li>
<li>
<p>Q3: What&rsquo;s the name of the final archive file containing all the data to be exfiltrated?</p>
<ul>
<li>A: <code>Forela-Dev-Data.zip</code></li>
</ul>
</li>
<li>
<p>Q4: What&rsquo;s the timestamp in UTC when attacker last modified the program source file?</p>
<ul>
<li>A: <code>2023-07-24 09:53:23</code></li>
</ul>
</li>
<li>
<p>Q5: The attacker wrote a data extortion note after exfiltrating data. What is the crypto wallet address to which attackers demanded payment?</p>
<ul>
<li>A: <code>0xca8fa8f0b631ecdb18cda619c4fc9d197c8affca</code></li>
</ul>
</li>
<li>
<p>Q6: What&rsquo;s the email address of the person to contact for support?</p>
<ul>
<li>A: <code>CyberJunkie@mail2torjgmxgexntbrmhvgluavhj7ouul5yar6ylbvjkxwqf6ixkwyd.onion</code></li>
</ul>
</li>
</ul>
<h3 id="summary">Summary</h3>
<p>Using the artifacts provided I was able to answer the questions. It was pretty straightforward. But answering Question 4 was a little bit baffling to me. It was related to Windows&rsquo;s FileTime System. I did a little bit of research and piece together an article that you can read <a href="https://hshakilst.github.io/posts/filetime/">here (FileTime)</a>. Also, I added a <a href="https://github.com/hshakilst/DFIR/blob/main/HTB%20Sherlocks/Noted/convert_splitted_filetime.py">Python script</a> to convert it into UTC.</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Filetime</title>
      <link>http://localhost:1313/posts/filetime/</link>
      <pubDate>Thu, 16 May 2024 12:14:06 +0200</pubDate>
      
      <guid>http://localhost:1313/posts/filetime/</guid>
      <description><![CDATA[<h1 id="filetime-in-windows">FILETIME in Windows</h1>
<h2 id="what-is-filetime">What is FILETIME?</h2>
<p>A file time is a 64-bit value that represents the number of 100-nanosecond intervals that have elapsed since 12:00 A.M. January 1, 1601 Coordinated Universal Time (UTC). The system records file times when applications create, access, and write to files.</p>
<p>The NTFS file system stores time values in UTC format, so they are not affected by changes in time zone or daylight saving time. The FAT file system stores time values based on the local time of the computer.</p>
<p>Time stamps are updated at various times and for various reasons. The only guarantee about a file time stamp is that the file time is correctly reflected when the handle that makes the change is closed.</p>
<blockquote>
<p>Not all file systems can record creation and last access times, and not all file systems record them in the same manner. For example, the resolution of create time on FAT is 10 milliseconds, while write time has a resolution of 2 seconds and access time has a resolution of 1 day, so it is really the access date. The NTFS file system delays updates to the last access time for a file by up to 1 hour after the last access.</p>
</blockquote>
<h2 id="filetime-structure-minwinbaseh">FILETIME Structure (minwinbase.h)</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>typedef struct _FILETIME {
</span></span><span style="display:flex;"><span>  DWORD dwLowDateTime;
</span></span><span style="display:flex;"><span>  DWORD dwHighDateTime;
</span></span><span style="display:flex;"><span>} FILETIME, *PFILETIME, *LPFILETIME;
</span></span></code></pre></div><p>Here, the <code>dwLowDateTime</code> is the low-order and the <code>dwHighDateTime</code> is the high-order part of the file time.</p>
<blockquote>
<p>Older compilers did not have support for 64 bit types. So the structure splits the 64 bit value into two 32 bit parts. The low part contains the least significant 32 bits. The high part contains the most significant 32 bits.</p>
</blockquote>
<h2 id="converting-filetime-to-human-readable-format">Converting FILETIME to Human Readable Format</h2>
<p>To convert the FILETIME into human readable format we need a unsigned 64 bit integer union. But 64 bit integer support may vary compiler to compiler based on CPU architecture and OS versions. Microsoft&rsquo;s official documentation says it supports <code>ULARGE_INTEGER</code> (unsigned 64 bit integer union) from <code>Windows 10 Build 20348</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>typedef union _ULARGE_INTEGER {
</span></span><span style="display:flex;"><span>  struct {
</span></span><span style="display:flex;"><span>    DWORD LowPart;
</span></span><span style="display:flex;"><span>    DWORD HighPart;
</span></span><span style="display:flex;"><span>  } DUMMYSTRUCTNAME;
</span></span><span style="display:flex;"><span>  struct {
</span></span><span style="display:flex;"><span>    DWORD LowPart;
</span></span><span style="display:flex;"><span>    DWORD HighPart;
</span></span><span style="display:flex;"><span>  } u;
</span></span><span style="display:flex;"><span>  ULONGLONG QuadPart;
</span></span><span style="display:flex;"><span>} ULARGE_INTEGER;
</span></span></code></pre></div><blockquote>
<p>The ULARGE_INTEGER structure is actually a union. If your compiler has built-in support for 64-bit integers, use the QuadPart member to store the 64-bit integer. Otherwise, use the LowPart and HighPart members to store the 64-bit integer.</p>
</blockquote>
<p>So, many softwares uses the LowPart and HighPart to store a unsigned 64 bit integer by splitting it into 32 bit each. For example <code>Notepad++</code> uses <code>originalFileLastModifTimestamp</code> as <code>LowPart</code> and
<code>originalFileLastModifTimestampHigh</code> as <code>HighPart</code> to store the FILETIME timestamps.</p>
<p>To retrieve a human readable date/time from these two parts needs some arithmatic operations.</p>
<p>A simplest way to get the original FILETIME timestamp from LowPart and HighPart is a by using the following formula.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>LowPart + 2^32 * HighPart
</span></span></code></pre></div><p>The formula does not provide a good enough precision. Meaning the retrieved value may have some deviations of minutes and seconds.</p>
<p>To retrive the precise date/time value we need to perform some bitwise operation on the <code>LowPart</code> and <code>HighPart</code> in python to convert it into it&rsquo;s original form (a 64 bit unsigned integer).</p>
<p>A FILETIME timestamp is a number in 100-nanosecond intervals that have elapsed since 12:00 A.M. January 1, 1601 Coordinated Universal Time (UTC) till the creation time of the timestamp. To get the creation time, we need to add it to the nanosecond value of the initial date (1601-01-01).</p>
<p><strong>PS: We can convert the timestamp&rsquo;s value to millisecond or second also. The retrived date/time will be in UTC, as the initial value is in UTC.</strong></p>
<p>Here&rsquo;s a simple python script to convert splitted FILETIME timestamp to human readable format.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>import datetime
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>timestamp_low = -1354503710
</span></span><span style="display:flex;"><span>timestamp_high = 31047188
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>full_timestamp = (timestamp_high &lt;&lt; 32) | (timestamp_low &amp; 0xFFFFFFFF)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(full_timestamp)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>timestamp_seconds = full_timestamp / 10**7
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(timestamp_seconds)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>converted_date_from_file_time = datetime.datetime(1601, 1, 1) + datetime.timedelta(seconds=timestamp_seconds)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(converted_date_from_file_time)
</span></span></code></pre></div><h2 id="references">References</h2>
<ul>
<li><a href="https://learn.microsoft.com/en-us/windows/win32/sysinfo/file-times">File Times</a></li>
<li><a href="https://learn.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-ularge_integer-r1">ULARGE_INTEGER union</a></li>
<li><a href="https://learn.microsoft.com/en-us/windows/win32/api/minwinbase/ns-minwinbase-filetime">FILETIME structure</a></li>
<li><a href="https://stackoverflow.com/questions/29266743/what-is-dwlowdatetime-and-dwhighdatetime">What is dwLowDateTime and dwHighDateTime</a></li>
<li><a href="https://stackoverflow.com/posts/1100288/revisions">How to create FILETIME in Win32?</a></li>
<li><a href="https://forum.hackthebox.com/t/noted-sherlock/307329/6">HTB Discussion Board</a></li>
<li><a href="https://www.epochconverter.com/ldap">LDAP, Active Directory &amp; Filetime Timestamp Converter</a></li>
</ul>
]]></description>
      
    </item>
    
    
  </channel>
</rss>
