<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss">
  <channel>
    <title>Dfir on Shakil&#39;s Blog</title>
    <link>http://localhost:1313/tags/dfir/</link>
    <description>Recent content in Dfir on Shakil&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Shakil Hossain - All Right Reserved.</copyright>
    <lastBuildDate>Thu, 16 May 2024 12:59:39 +0200</lastBuildDate><atom:link href="http://localhost:1313/tags/dfir/index.xml" rel="self" type="application/rss+xml" /><icon>http://localhost:1313/logo.svg</icon>
    
    
    <item>
      <title>HTB Sherlock Noted</title>
      <link>http://localhost:1313/posts/htb-sherlocks/noted/</link>
      <pubDate>Thu, 16 May 2024 12:59:39 +0200</pubDate>
      
      <guid>http://localhost:1313/posts/htb-sherlocks/noted/</guid>
      <description><![CDATA[<h1 id="noted-dfir">Noted (DFIR)</h1>
<h3 id="scenario">Scenario</h3>
<p>Simon, a developer working at Forela, notified the CERT team about a note that appeared on his desktop. The note claimed that his system had been compromised and that sensitive data from Simon&rsquo;s workstation had been collected. The perpetrators performed data extortion on his workstation and are now threatening to release the data on the dark web unless their demands are met. Simon&rsquo;s workstation contained multiple sensitive files, including planned software projects, internal development plans, and application codebases. The threat intelligence team believes that the threat actor made some mistakes, but they have not found any way to contact the threat actors. The company&rsquo;s stakeholders are insisting that this incident be resolved and all sensitive data be recovered. They demand that under no circumstances should the data be leaked. As our junior security analyst, you have been assigned a specific type of DFIR (Digital Forensics and Incident Response) investigation in this case. The CERT lead, after triaging the workstation, has provided you with only the Notepad++ artifacts, suspecting that the attacker created the extortion note and conducted other activities with hands-on keyboard access. Your duty is to determine how the attack occurred and find a way to contact the threat actors, as they accidentally locked out their own contact information.</p>
<h3 id="forensics">Forensics</h3>
<ul>
<li>
<p><strong>Artifacts</strong>: The artifacts are from <code>Notepad++</code> software. We have two XML files named <code>config.xml</code> and <code>session.xml</code>. We are also provided with two backup files of two text files <code>LootAndPurge.java@2023-07-24_145332</code> and <code>YOU HAVE BEEN HACKED.txt@2023-07-24_150548</code>.</p>
</li>
<li>
<p><strong>Extraction</strong>: The files were all in plaintext format and the volume of data was low, so extraction was not necessary. However, five files were created for classification purposes. They are <a href="https://github.com/hshakilst/DFIR/blob/main/HTB%20Sherlocks/Noted/file_history.txt">file history of recently opened files</a>, <a href="https://github.com/hshakilst/DFIR/blob/main/HTB%20Sherlocks/Noted/edited_files.txt">edited files in the alleged Notepad++</a>, <a href="https://github.com/hshakilst/DFIR/blob/main/HTB%20Sherlocks/Noted/custom_uris.txt">custom URIs the alleged Notepad++ was set to handle</a>, <a href="https://github.com/hshakilst/DFIR/blob/main/HTB%20Sherlocks/Noted/LootAndPurge.java">malicious data extortion java file</a> and <a href="https://github.com/hshakilst/DFIR/blob/main/HTB%20Sherlocks/Noted/YOU%20HAVE%20BEEN%20HACKED.txt">a ransom note file</a></p>
</li>
<li>
<p><strong>Analysis</strong>:</p>
<p>First, I examined the <code>config.xml</code> file and found some file histories. The history contained the file addresses that were recently opened by the user. I have listed them in the <a href="https://github.com/hshakilst/DFIR/blob/main/HTB%20Sherlocks/Noted/file_history.txt"><code>file_history.txt</code></a> file. Also, I found some custom URIs that were set to handle files from different types of services. They are listed in the <a href="https://github.com/hshakilst/DFIR/blob/main/HTB%20Sherlocks/Noted/custom_uris.txt"><code>custom_uris.txt</code></a> file.</p>
<p>Second, I analyzed the <code>session.xml</code> file and there I found two files that were being edited along with their backup file locations and last modified timestamps. I added them to a file named <a href="https://github.com/hshakilst/DFIR/blob/main/HTB%20Sherlocks/Noted/edited_files.txt"><code>edited_files.txt</code></a> with the findings.</p>
<p>Finally, I inspected the backup files and discovered a malicious <a href="https://github.com/hshakilst/DFIR/blob/main/HTB%20Sherlocks/Noted/LootAndPurge.java">Java source file</a>(LootAndPurge.java) that was used to encrypt the sensitive data and a <a href="https://github.com/hshakilst/DFIR/blob/main/HTB%20Sherlocks/Noted/YOU%20HAVE%20BEEN%20HACKED.txt">ransom note</a> where two <code>Pastebin</code> links were given to contact the cybercriminals. A password for the zip file was left behind by the perpetrators. Which can be used to decrypt the content of the zip file. The same password can be used to decrypt the <code>Pastebin</code> notes to find their Ethereum wallet address and email address.</p>
</li>
</ul>
<h3 id="tools-used">Tools Used</h3>
<ul>
<li>Visual Studio Code</li>
<li>Python3</li>
</ul>
<h3 id="questions-and-answers">Questions and Answers</h3>
<ul>
<li>
<p>Q1: What is the full path of the script used by Simon for AWS operations?</p>
<ul>
<li>A: <code>C:\Users\Simon.stark\Documents\Dev_Ops\AWS_objects migration.pl</code></li>
</ul>
</li>
<li>
<p>Q2: The attacker duplicated some program code and compiled it on the system, knowing that the victim was a software engineer and had all the necessary utilities. They did this to blend into the environment and didn&rsquo;t bring any of their tools. This code gathered sensitive data and prepared it for exfiltration. What is the full path of the program&rsquo;s source file?</p>
<ul>
<li>A: <code>C:\Users\simon.stark\Desktop\LootAndPurge.java</code>.</li>
</ul>
</li>
<li>
<p>Q3: What&rsquo;s the name of the final archive file containing all the data to be exfiltrated?</p>
<ul>
<li>A: <code>Forela-Dev-Data.zip</code></li>
</ul>
</li>
<li>
<p>Q4: What&rsquo;s the timestamp in UTC when attacker last modified the program source file?</p>
<ul>
<li>A: <code>2023-07-24 09:53:23</code></li>
</ul>
</li>
<li>
<p>Q5: The attacker wrote a data extortion note after exfiltrating data. What is the crypto wallet address to which attackers demanded payment?</p>
<ul>
<li>A: <code>0xca8fa8f0b631ecdb18cda619c4fc9d197c8affca</code></li>
</ul>
</li>
<li>
<p>Q6: What&rsquo;s the email address of the person to contact for support?</p>
<ul>
<li>A: <code>CyberJunkie@mail2torjgmxgexntbrmhvgluavhj7ouul5yar6ylbvjkxwqf6ixkwyd.onion</code></li>
</ul>
</li>
</ul>
<h3 id="summary">Summary</h3>
<p>Using the artifacts provided I was able to answer the questions. It was pretty straightforward. But answering Question 4 was a little bit baffling to me. It was related to Windows&rsquo;s FileTime System. I did a little bit of research and piece together an article that you can read <a href="https://hshakilst.github.io/posts/filetime/">here (FileTime)</a>. Also, I added a <a href="https://github.com/hshakilst/DFIR/blob/main/HTB%20Sherlocks/Noted/convert_splitted_filetime.py">Python script</a> to convert it into UTC.</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>HTB Sherlock Jingle Bell</title>
      <link>http://localhost:1313/posts/htb-sherlocks/jingle-bell/</link>
      <pubDate>Thu, 16 May 2024 12:54:17 +0200</pubDate>
      
      <guid>http://localhost:1313/posts/htb-sherlocks/jingle-bell/</guid>
      <description><![CDATA[<h1 id="jingle-bell-dfir">Jingle Bell (DFIR)</h1>
<h3 id="scenario">Scenario</h3>
<p>Torrin is suspected to be an insider threat in Forela. He is believed to have leaked some data and removed certain applications from their workstation. They managed to bypass some controls and installed unauthorized software. Despite the forensic team&rsquo;s efforts, no evidence of data leakage was found. As a senior incident responder, you have been tasked with investigating the incident to determine the conversation between the two parties involved.</p>
<h3 id="forensics">Forensics</h3>
<p>We are given a Windows push notification database file named <code>wpndatabase.db</code>. We can learn more about this database file on:</p>
<ul>
<li><a href="https://www.mdpi.com/2673-6756/2/1/7">A Digital Forensic View of Windows 10 Notifications</a></li>
<li><a href="https://tzworks.com/prototypes/wpn/wpn.users.guide.pdf">Windows Push Notification (wpn) Database Parser Users Guide by TZWorksÂ®</a></li>
</ul>
<p>From reading these articles we discovered that in that db file, there&rsquo;s a table named <code>Notification</code>. It contains the information of the notifications shown by Windows&rsquo;s Notification Manager as <code>XML</code> payload.</p>
<p>Therefore, we used <code>sqlitebrowser</code> and manually dumped the <code>XML</code> data from the <code>Notification</code> table. And saved them in the <a href="https://github.com/hshakilst/DFIR/blob/main/HTB%20Sherlocks/Jingle%20Bell/notifications.xml">notifications.xml</a> file.</p>
<p>We need to analyze this XML file to answer the following questions.</p>
<h3 id="questions-and-answers">Questions and Answers</h3>
<ul>
<li>
<p>Q: Which software/application did Torrin use to leak Forela&rsquo;s secrets?</p>
<ul>
<li>A: Torrin used <code>Slack</code> to leak the secrets. We know this from the notification&rsquo;s <code>&lt;toast launch=&quot;&quot;&gt;</code> section.</li>
</ul>
</li>
<li>
<p>Q: What&rsquo;s the name of the rival company to which Torrin leaked the data?</p>
<ul>
<li>A: The rival company&rsquo;s name is <code>PrimeTech Innovations</code>. We got this information from <code>&lt;header title=&quot;&quot;&gt;</code> section of the notification.</li>
</ul>
</li>
<li>
<p>Q: What is the username of the person from the competitor organization whom Torrin shared information with?</p>
<ul>
<li>A: The username is <code>Cyberjunkie-PrimeTechDev</code>. We get this answer from <code>&lt;binding&gt;</code>&rsquo;s second <code>&lt;text&gt;</code> tag where the attribute <code>hint-style=&quot;bodySubtle&quot;</code> exists.</li>
</ul>
</li>
<li>
<p>Q: What&rsquo;s the channel name in which they conversed with each other?</p>
<ul>
<li>A: The channel name is <code>forela-secrets-leak</code>. We can derive this from <code>&lt;binding&gt;</code>&rsquo;s first <code>&lt;text&gt;</code> tag where the attribute <code>hint-maxLines=&quot;1&quot;</code> exists.</li>
</ul>
</li>
<li>
<p>Q: What was the password for the archive server?</p>
<ul>
<li>A: The password for the archive server is <code>Tobdaf8Qip$re@1</code>. We get this from reading the body of a notification.</li>
</ul>
</li>
<li>
<p>Q: What was the URL provided to Torrin to upload stolen data to?</p>
<ul>
<li>A: The URL is <code>https://drive.google.com/drive/folders/1vW97VBmxDZUIEuEUG64g5DLZvFP-Pdll?usp=sharing</code>.</li>
</ul>
</li>
<li>
<p>Q: When was the above link shared with Torrin?</p>
<ul>
<li>A: When answering this question we faced some difficulties. Two timestamps could be the answer to the question. Firstly, the <code>Notification</code> table has an <code>ArrivalTime</code> timestamp expressed in <code>Microsoft Filetime 64-bit</code> format. When converted to date it gave <code>GMT Thu Apr 20 2023 10:36:08</code>. But it wasn&rsquo;t the answer. Secondly, there was another timestamp embedded inside the <code>&lt;toast launch=&quot;slack://channel?id=C05451QSQM8&amp;amp;message=1681986889.660179&amp;amp;team=T054518ADUJ&amp;amp;origin=notification&quot;&gt;</code> tag of the notification&rsquo;s XML structure. The <code>message=1681986889.660179</code> converts to <code>GMT Thu Apr 20 2023 10:34:49</code>. Turns out the latter one was the correct one. So, the answer is <code>2023-04-20 10:34:49</code>.</li>
</ul>
</li>
<li>
<p>Q: For how much money did Torrin leak Forela&rsquo;s secrets?</p>
<ul>
<li>A: The answer is <code>Â£10000</code>. We could find it in the <a href="https://github.com/hshakilst/DFIR/blob/main/HTB%20Sherlocks/Jingle%20Bell/notifications.xml">notifications.xml</a> file.</li>
</ul>
</li>
</ul>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>HTB Sherlock BFT</title>
      <link>http://localhost:1313/posts/htb-sherlocks/bft/</link>
      <pubDate>Thu, 16 May 2024 12:44:59 +0200</pubDate>
      
      <guid>http://localhost:1313/posts/htb-sherlocks/bft/</guid>
      <description><![CDATA[<h1 id="bft-dfir">BFT (DFIR)</h1>
<h3 id="scenario">Scenario</h3>
<p>In this Sherlock, you will become acquainted with MFT (Master File Table) forensics. You will be introduced to well-known tools and methodologies for analyzing MFT artifacts to identify malicious activity. During our analysis, you will utilize the MFTECmd tool to parse the provided MFT file, TimeLine Explorer to open and analyze the results from the parsed MFT, and a Hex editor to recover file contents from the MFT.</p>
<h3 id="forensics">Forensics</h3>
<ul>
<li><strong>Artifact</strong>: An MFT file <code>$MFT</code> is provided. It&rsquo;s an NTFS file system&rsquo;s master file table. <a href="https://hshakilst.github.io/posts/master-file-table/">Learn more about MFT here</a>.</li>
<li><strong>Extraction</strong>: I used <code>MFTECmd</code> to extract the contents of it and saved it to a file in CSV format.</li>
<li><strong>Analysis</strong>: <code>Timeline Explorer</code> and <code>010Editor</code> were used to answer the questions.</li>
</ul>
<h3 id="tools-used">Tools Used</h3>
<ul>
<li><a href="https://github.com/EricZimmerman/MFTECmd">MFTECmd by Eric Zimmerman</a></li>
<li><a href="https://ericzimmerman.github.io/#!index.md">Timeline Explorer</a></li>
<li><a href="https://www.sweetscape.com/download/010editor/">010Editor Hex Editor</a></li>
</ul>
<h3 id="questions-and-answers">Questions and Answers</h3>
<ul>
<li>
<p>Q1: Simon Stark was targeted by attackers on February 13. He downloaded a ZIP file from a link received in an email. What was the name of the ZIP file he downloaded from the link?</p>
<ul>
<li>A: The answer is <code>Stage-20240213T093324Z-001.zip</code>. I applied a filter on the header <code>Created0x10</code> with the date <code>2024-02-13</code> and on the header <code>Extension</code> with the value <code>.zip</code>.</li>
</ul>
</li>
<li>
<p>Q2: Examine the Zone Identifier contents for the initially downloaded ZIP file. This field reveals the HostUrl from where the file was downloaded, serving as a valuable Indicator of Compromise (IOC) in our investigation/analysis. What is the full Host URL from where this ZIP file was downloaded?</p>
<ul>
<li>
<p>A: The answer is <code>https://storage.googleapis.com/drive-bulk-export-anonymous/20240213T093324.039Z/4133399871716478688/a40aecd0-1cf3-4f88-b55a-e188d5c1c04f/1/c277a8b4-afa9-4d34-b8ca-e1eb5e5f983c?authuser</code>.</p>
<p>To find the URL of the downloaded file I needed to locate the <code>Stage-20240213T093324Z-001.zip:Zone.Identifier</code> file by applying a filter on <code>Extension</code> with the value <code>.Identifier</code>. The <code>Zone.Identifier</code> file separated by a <code>:</code> after the original file is an <strong>Alternate Data Stream (ADS)</strong> file. It contains the file&rsquo;s origin Location. In this case, it was a URL. It can be found under the <code>Zone Id Contents</code> header.</p>
</li>
</ul>
</li>
<li>
<p>Q3: What is the full path and name of the malicious file that executed malicious code and connected to a C2 server?</p>
<ul>
<li>A: The answer is <code>C:\Users\simon.stark\Downloads\Stage-20240213T093324Z-001\Stage\invoice\invoices\invoice.bat</code>. The file was found by applying a filter on the header <code>Parent Path</code> with the initial zip file&rsquo;s partial name <code>Stage</code> and a suspicious <code>.bat</code> file was discovered.</li>
</ul>
</li>
<li>
<p>Q4: Analyze the $Created0x30 timestamp for the previously identified file. When was this file created on disk?</p>
<ul>
<li>A: The answer is <code>2024-02-13 16:38:39</code>. <a href="https://hshakilst.github.io/posts/master-file-table/#timestamps">Learn more about the difference between $Created0x10 and $Created0x30</a>.</li>
</ul>
</li>
<li>
<p>Q5: Finding the hex offset of an MFT record is beneficial in many investigative scenarios. Find the hex offset of the stager file from Question 3.</p>
<ul>
<li>A: The answer is <code>16E3000</code>. To find the answer I needed to look for the malicious file&rsquo;s <code>Entry Number</code> which was <code>23436</code>. Then I multiplied it with 1024 <code>23436*1024</code> because each entry in the MFT is <code>1024 bytes</code> in size. After that, I converted the Decimal number to Hex.</li>
</ul>
</li>
<li>
<p>Q6: Each MFT record is 1024 bytes in size. If a file on disk has smaller size than 1024 bytes, they can be stored directly on MFT File itself. These are called MFT Resident files. During Windows File system Investigation, its crucial to look for any malicious/suspicious files that may be resident in MFT. This way we can find contents of malicious files/scripts. Find the contents of The malicious stager identified in Question3 and answer with the C2 IP and port.</p>
<ul>
<li>
<p>A: The answer is <code>43.204.110.203:6666</code>.</p>
<p>I had the hex offset for the <code>invoice.bat</code> file&rsquo;s entry and from the <strong>Timeline Explorer</strong>, and I discovered the <code>File Size</code> was <code>286 bytes</code>. So, it can be safely assumed it is an <a href="https://hshakilst.github.io/posts/master-file-table/#mft-resident-files"><code>MFT Resident</code> file</a>. The contents of this file can be viewed using a Hex Editor.</p>
<p>I opened up my Hex Editor went to the offset <code>16E3000</code> and found the file&rsquo;s contents. It used <code>powershell</code> to download a payload from the above IP.</p>
</li>
</ul>
</li>
</ul>
<h3 id="summary">Summary</h3>
<p>Using the MFT file I was able to discover a stager file residing in MFT and the URL which was used to deliver it initially. I also discovered a C2 server by reading the contents of that file. A timeline for this incident was also established using Timeline Explorer.</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Filetime</title>
      <link>http://localhost:1313/posts/filetime/</link>
      <pubDate>Thu, 16 May 2024 12:14:06 +0200</pubDate>
      
      <guid>http://localhost:1313/posts/filetime/</guid>
      <description><![CDATA[<h1 id="filetime-in-windows">FILETIME in Windows</h1>
<h2 id="what-is-filetime">What is FILETIME?</h2>
<p>A file time is a 64-bit value that represents the number of 100-nanosecond intervals that have elapsed since 12:00 A.M. January 1, 1601 Coordinated Universal Time (UTC). The system records file times when applications create, access, and write to files.</p>
<p>The NTFS file system stores time values in UTC format, so they are not affected by changes in time zone or daylight saving time. The FAT file system stores time values based on the local time of the computer.</p>
<p>Time stamps are updated at various times and for various reasons. The only guarantee about a file time stamp is that the file time is correctly reflected when the handle that makes the change is closed.</p>
<blockquote>
<p>Not all file systems can record creation and last access times, and not all file systems record them in the same manner. For example, the resolution of create time on FAT is 10 milliseconds, while write time has a resolution of 2 seconds and access time has a resolution of 1 day, so it is really the access date. The NTFS file system delays updates to the last access time for a file by up to 1 hour after the last access.</p>
</blockquote>
<h2 id="filetime-structure-minwinbaseh">FILETIME Structure (minwinbase.h)</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>typedef struct _FILETIME {
</span></span><span style="display:flex;"><span>  DWORD dwLowDateTime;
</span></span><span style="display:flex;"><span>  DWORD dwHighDateTime;
</span></span><span style="display:flex;"><span>} FILETIME, *PFILETIME, *LPFILETIME;
</span></span></code></pre></div><p>Here, the <code>dwLowDateTime</code> is the low-order and the <code>dwHighDateTime</code> is the high-order part of the file time.</p>
<blockquote>
<p>Older compilers did not have support for 64 bit types. So the structure splits the 64 bit value into two 32 bit parts. The low part contains the least significant 32 bits. The high part contains the most significant 32 bits.</p>
</blockquote>
<h2 id="converting-filetime-to-human-readable-format">Converting FILETIME to Human Readable Format</h2>
<p>To convert the FILETIME into human readable format we need a unsigned 64 bit integer union. But 64 bit integer support may vary compiler to compiler based on CPU architecture and OS versions. Microsoft&rsquo;s official documentation says it supports <code>ULARGE_INTEGER</code> (unsigned 64 bit integer union) from <code>Windows 10 Build 20348</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>typedef union _ULARGE_INTEGER {
</span></span><span style="display:flex;"><span>  struct {
</span></span><span style="display:flex;"><span>    DWORD LowPart;
</span></span><span style="display:flex;"><span>    DWORD HighPart;
</span></span><span style="display:flex;"><span>  } DUMMYSTRUCTNAME;
</span></span><span style="display:flex;"><span>  struct {
</span></span><span style="display:flex;"><span>    DWORD LowPart;
</span></span><span style="display:flex;"><span>    DWORD HighPart;
</span></span><span style="display:flex;"><span>  } u;
</span></span><span style="display:flex;"><span>  ULONGLONG QuadPart;
</span></span><span style="display:flex;"><span>} ULARGE_INTEGER;
</span></span></code></pre></div><blockquote>
<p>The ULARGE_INTEGER structure is actually a union. If your compiler has built-in support for 64-bit integers, use the QuadPart member to store the 64-bit integer. Otherwise, use the LowPart and HighPart members to store the 64-bit integer.</p>
</blockquote>
<p>So, many softwares uses the LowPart and HighPart to store a unsigned 64 bit integer by splitting it into 32 bit each. For example <code>Notepad++</code> uses <code>originalFileLastModifTimestamp</code> as <code>LowPart</code> and
<code>originalFileLastModifTimestampHigh</code> as <code>HighPart</code> to store the FILETIME timestamps.</p>
<p>To retrieve a human readable date/time from these two parts needs some arithmatic operations.</p>
<p>A simplest way to get the original FILETIME timestamp from LowPart and HighPart is a by using the following formula.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>LowPart + 2^32 * HighPart
</span></span></code></pre></div><p>The formula does not provide a good enough precision. Meaning the retrieved value may have some deviations of minutes and seconds.</p>
<p>To retrive the precise date/time value we need to perform some bitwise operation on the <code>LowPart</code> and <code>HighPart</code> in python to convert it into it&rsquo;s original form (a 64 bit unsigned integer).</p>
<p>A FILETIME timestamp is a number in 100-nanosecond intervals that have elapsed since 12:00 A.M. January 1, 1601 Coordinated Universal Time (UTC) till the creation time of the timestamp. To get the creation time, we need to add it to the nanosecond value of the initial date (1601-01-01).</p>
<p><strong>PS: We can convert the timestamp&rsquo;s value to millisecond or second also. The retrived date/time will be in UTC, as the initial value is in UTC.</strong></p>
<p>Here&rsquo;s a simple python script to convert splitted FILETIME timestamp to human readable format.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>import datetime
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>timestamp_low = -1354503710
</span></span><span style="display:flex;"><span>timestamp_high = 31047188
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>full_timestamp = (timestamp_high &lt;&lt; 32) | (timestamp_low &amp; 0xFFFFFFFF)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(full_timestamp)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>timestamp_seconds = full_timestamp / 10**7
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(timestamp_seconds)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>converted_date_from_file_time = datetime.datetime(1601, 1, 1) + datetime.timedelta(seconds=timestamp_seconds)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(converted_date_from_file_time)
</span></span></code></pre></div><h2 id="references">References</h2>
<ul>
<li><a href="https://learn.microsoft.com/en-us/windows/win32/sysinfo/file-times">File Times</a></li>
<li><a href="https://learn.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-ularge_integer-r1">ULARGE_INTEGER union</a></li>
<li><a href="https://learn.microsoft.com/en-us/windows/win32/api/minwinbase/ns-minwinbase-filetime">FILETIME structure</a></li>
<li><a href="https://stackoverflow.com/questions/29266743/what-is-dwlowdatetime-and-dwhighdatetime">What is dwLowDateTime and dwHighDateTime</a></li>
<li><a href="https://stackoverflow.com/posts/1100288/revisions">How to create FILETIME in Win32?</a></li>
<li><a href="https://forum.hackthebox.com/t/noted-sherlock/307329/6">HTB Discussion Board</a></li>
<li><a href="https://www.epochconverter.com/ldap">LDAP, Active Directory &amp; Filetime Timestamp Converter</a></li>
</ul>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Master File Table</title>
      <link>http://localhost:1313/posts/master-file-table/</link>
      <pubDate>Thu, 16 May 2024 11:20:29 +0200</pubDate>
      
      <guid>http://localhost:1313/posts/master-file-table/</guid>
      <description><![CDATA[<h2 id="what-is-a-master-file-table">What is a Master File Table?</h2>
<p>The Master File Table (MFT) is a system file in the NTFS file system (having the name $MFT) that stores metadata information about all files and directories on an NTFS volume. The MFT acts as an index to all the files and directories on the volume, providing quick access to the information needed to retrieve a file.</p>
<p>Each file and directory on an NTFS volume has a unique record in the MFT, known as an MFT entry. The MFT entry contains information such as the file name, timestamps, permissions, and a pointer to the fileâs data. The corresponding MFT entry is updated when a file is created or modified.</p>
<p>When a file is deleted, the corresponding MFT entry is marked as free, but the actual file data remains on the disk until it is overwritten by new data. This can be useful in data recovery scenarios, as the deleted fileâs data may still be recoverable. Successful data recovery requires that the Disk regions occupied by the deleted data are not overwritten.</p>
<p><strong>Note: The MFT is stored on the NTFS volume and is an important component of the NTFS file system. The MFT must remain intact and undamaged for the file system to function properly.</strong></p>
<h2 id="why-is-the-mft-useful-for-forensics">Why is the MFT Useful for Forensics?</h2>
<ol>
<li>
<p><strong>Comprehensive Data Storage</strong>: The MFT provides a detailed record of each file, including
timestamps, permissions, and data content locations, making it invaluable for forensic
investigations.</p>
</li>
<li>
<p><strong>Recovery of Deleted Files</strong>: Even when files are deleted, their MFT entries might not be
immediately reused. This allows forensic analysts to recover details about the deleted files,
which can be crucial in legal contexts.</p>
</li>
<li>
<p><strong>Tracking File Modifications</strong>: The MFT includes multiple timestamps that record different
types of file access and modifications. This can help construct a timeline of activities on a
system, an essential aspect of forensic analysis.</p>
</li>
<li>
<p><strong>Detecting Malware and Unauthorized Access</strong>: Since the MFT records file creation and
modification details, unusual changes detected in these entries can indicate unauthorised
access or malware activity.</p>
</li>
</ol>
<h2 id="general-structure-of-mft-record">General Structure of MFT Record</h2>
<p>The structure of the Master File Table (MFT) in the NTFS file system is complex and consists of multiple records, each of which represents a file or directory on the NTFS volume. Each MFT record is 1024 bytes, making the MFT very simple to parse. An MFT record has the following general structure:</p>
<ul>
<li>
<p><strong>File Record Header</strong>: This section contains information about the record itself, including the size of the record, the offset of the update sequence, and the flags that indicate the state of the file or directory.</p>
</li>
<li>
<p><strong>File Attribute List</strong>: This section contains a list of attributes that describe the file or directory, including its name, timestamps, size, and data. Each attribute is stored as a separate structure with its format.</p>
</li>
<li>
<p><strong>Data Runs</strong>: This section describes the location of the file or directoryâs data on the disk. The data runs are stored as a series of extents describing the starting cluster and the length of each contiguous data block.</p>
</li>
</ul>
<p>The exact format and structure of the MFT in NTFS can vary depending on the version of the file system in use. However, the general structure remains the same, with the File Record Header, File Attribute List, and Data Runs being the main components of each MFT entry.</p>
<p><strong>Note: Itâs important to note that accessing the MFT directly can be dangerous and potentially lead to file system corruption or data loss. Before attempting to access or modify the MFT, itâs recommended to perform operations on a backup of the MFT or back up important data beforehand.</strong></p>
<h2 id="detailed-breakdown-of-mft-fields">Detailed Breakdown of MFT Fields</h2>
<ol>
<li>
<p><strong>$STANDARD_INFORMATION</strong></p>
<ul>
<li><strong>Creation Time</strong>: The date and time when the file or directory was created.</li>
<li><strong>Modification Time</strong>: The date and time when the file or directory was last modified.</li>
<li><strong>Access Time</strong>: The date and time when the file or directory was last accessed.</li>
<li><strong>Entry Modified Time</strong>: The date and time when the MFT entry itself was last modified.</li>
<li><strong>Use Case</strong>: These timestamps are vital for timeline analysis to determine the sequence of user actions and file usage.</li>
</ul>
</li>
<li>
<p><strong>$FILE_NAME</strong></p>
<ul>
<li><strong>File Name</strong>: The name of the file or directory.</li>
<li>Parent Directory: The MFT record number of the directory in which the file resides.</li>
<li><strong>Additional Timestamps</strong>: Similar to $STANDARD_INFORMATION, but specific to this attribute and sometimes used as a fallback.</li>
<li><strong>Use Case</strong>: This attribute is used to confirm the integrity of file paths and names in the system, which is crucial for tracking user movements and detecting unauthorised changes.</li>
</ul>
</li>
<li>
<p><strong>$DATA</strong></p>
<ul>
<li><strong>Actual Data or Pointer</strong>: Either the data itself for smaller files or a pointer to the data for larger files.</li>
<li><strong>Use Case</strong>: Direct analysis of file contents and data recovery, especially important in cases involving data theft or unauthorized data manipulation.</li>
</ul>
</li>
<li>
<p><strong>$LOGGED_UTILITY_STREAM</strong></p>
<ul>
<li><strong>Transactional Data</strong>: Holds data related to transactional NTFS (TxF), which logs temporary file state changes.</li>
<li><strong>Use Case</strong>: Can be used to track changes made during a transaction, useful in cases of system crashes or unexpected shutdowns to determine interim states.</li>
</ul>
</li>
<li>
<p><strong>$BITMAP</strong></p>
<ul>
<li><strong>Cluster Allocation</strong>: Maps which clusters are in use by the file.</li>
<li><strong>Use Case</strong>: Useful for recovering deleted files or reconstructing file data from clusters not overwritten by new data.</li>
</ul>
</li>
<li>
<p><strong>$SECURITY_DESCRIPTOR</strong></p>
<ul>
<li><strong>Owner ID</strong>: Identifies who owns the file.</li>
<li><strong>Permissions</strong>: Details what permissions are attached to the file (who can read, write, execute, etc.).</li>
<li><strong>Audit Settings</strong>: Specifies what operations (like access or changes) are logged by the system.</li>
<li><strong>Use Case</strong>: Critical for determining access rights and detecting potential security breaches where permissions may have been altered.</li>
</ul>
</li>
<li>
<p><strong>$VOLUME_INFORMATION</strong> (specific to the MFT entry for the volume itself)</p>
<ul>
<li><strong>Volume Serial Number</strong>: Unique identifier for the volume.</li>
<li><strong>Flags</strong>: System flags related to the volume, such as whether itâs dirty (improperly unmounted).</li>
<li><strong>Use Case</strong>: Useful in multi-disk systems to link files and activities to specific volumes, essential in systems recovery and forensic analysis across multiple drives.</li>
</ul>
</li>
<li>
<p><strong>$INDEX_ROOT</strong> and <strong>$INDEX_ALLOCATION</strong></p>
<ul>
<li><strong>Index Entries</strong>: Used in directories to index contained files for quick access.</li>
<li><strong>Use Case</strong>: Forensically important for reconstructing directory structures and understanding how data was organized and accessed, particularly in complex investigations involving numerous files and directories.</li>
</ul>
</li>
</ol>
<h2 id="timestamps">Timestamps</h2>
<p>Created (0x10) is the Standard Information (SI) creation timestamp. This can be modified by user level processes, for example, timestomping. Created (0x30) is the FileName (FN) creation timestamp.</p>
<p>Timestamps of (FN) - behave differently from timestamps of (SI). These values don&rsquo;t change or all of the values change at once. However, rename and moved in a local volume are exceptions. These processes are inherited from (SI) value then set corresponding (FN) value. For more <a href="http://www.kazamiya.net/en/NTFS_Timestamps">NTFS Timestamps</a>.</p>
<h2 id="mft-resident-files">MFT Resident Files</h2>
<p>Files that can be stored directly within the Master File Table (MFT) known as resident files. The size of this kind of files varies depending on the file, the system, and the amount of metadata stored in the MFT.</p>
<p>Generally, the more metadata associated with a file, the less space remains for storing the file&rsquo;s data itself within the MFT. While there is no strict upper limit, typically files smaller than approximately 900 bytes can be fully contained within their MFT record.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.geeksforgeeks.org/what-is-a-master-file-table/">GeeksForGeeks</a></li>
<li><a href="http://www.kazamiya.net/en/NTFS_Timestamps">Kazamiya</a></li>
<li><a href="BFT-Write-Up.pdf">Official Writeup BFT by Cyberjunkie &amp; Sebh24 on HTB</a></li>
</ul>
]]></description>
      
    </item>
    
    
  </channel>
</rss>
