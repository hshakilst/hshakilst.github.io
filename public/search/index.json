
{
    
    
    
    
        
        
        
    
        
        
        
    
    "pages": [{"date":"2024-05-16","image":"","imageAlt":"","link":"https://hshakilst.github.io/posts/filetime/","summary":"FILETIME in Windows What is FILETIME? A file time is a 64-bit value that represents the number of 100-nanosecond intervals that have elapsed since 12:00 A.M. January 1, 1601 Coordinated Universal Time (UTC).","tags":["dfir","file","time","timestamp","windows"],"text":"filetime in windows what is filetime? a file time is a 64-bit value that represents the number of 100-nanosecond intervals that have elapsed since 12:00 a.m. january 1, 1601 coordinated universal time (utc). the system records file times when applications create, access, and write to files.\nthe ntfs file system stores time values in utc format, so they are not affected by changes in time zone or daylight saving time. the fat file system stores time values based on the local time of the computer.\ntime stamps are updated at various times and for various reasons. the only guarantee about a file time stamp is that the file time is correctly reflected when the handle that makes the change is closed.\nnot all file systems can record creation and last access times, and not all file systems record them in the same manner. for example, the resolution of create time on fat is 10 milliseconds, while write time has a resolution of 2 seconds and access time has a resolution of 1 day, so it is really the access date. the ntfs file system delays updates to the last access time for a file by up to 1 hour after the last access.\nfiletime structure (minwinbase.h) typedef struct _filetime { dword dwlowdatetime; dword dwhighdatetime; } filetime, *pfiletime, *lpfiletime; here, the dwlowdatetime is the low-order and the dwhighdatetime is the high-order part of the file time.\nolder compilers did not have support for 64 bit types. so the structure splits the 64 bit value into two 32 bit parts. the low part contains the least significant 32 bits. the high part contains the most significant 32 bits.\nconverting filetime to human readable format to convert the filetime into human readable format we need a unsigned 64 bit integer union. but 64 bit integer support may vary compiler to compiler based on cpu architecture and os versions. microsoft\u0026rsquo;s official documentation says it supports ularge_integer (unsigned 64 bit integer union) from windows 10 build 20348.\ntypedef union _ularge_integer { struct { dword lowpart; dword highpart; } dummystructname; struct { dword lowpart; dword highpart; } u; ulonglong quadpart; } ularge_integer; the ularge_integer structure is actually a union. if your compiler has built-in support for 64-bit integers, use the quadpart member to store the 64-bit integer. otherwise, use the lowpart and highpart members to store the 64-bit integer.\nso, many softwares uses the lowpart and highpart to store a unsigned 64 bit integer by splitting it into 32 bit each. for example notepad++ uses originalfilelastmodiftimestamp as lowpart and originalfilelastmodiftimestamphigh as highpart to store the filetime timestamps.\nto retrieve a human readable date/time from these two parts needs some arithmatic operations.\na simplest way to get the original filetime timestamp from lowpart and highpart is a by using the following formula.\nlowpart + 2^32 * highpart the formula does not provide a good enough precision. meaning the retrieved value may have some deviations of minutes and seconds.\nto retrive the precise date/time value we need to perform some bitwise operation on the lowpart and highpart in python to convert it into it\u0026rsquo;s original form (a 64 bit unsigned integer).\na filetime timestamp is a number in 100-nanosecond intervals that have elapsed since 12:00 a.m. january 1, 1601 coordinated universal time (utc) till the creation time of the timestamp. to get the creation time, we need to add it to the nanosecond value of the initial date (1601-01-01).\nps: we can convert the timestamp\u0026rsquo;s value to millisecond or second also. the retrived date/time will be in utc, as the initial value is in utc.\nhere\u0026rsquo;s a simple python script to convert splitted filetime timestamp to human readable format.\nimport datetime timestamp_low = -1354503710 timestamp_high = 31047188 full_timestamp = (timestamp_high \u0026lt;\u0026lt; 32) | (timestamp_low \u0026amp; 0xffffffff) print(full_timestamp) timestamp_seconds = full_timestamp / 10**7 print(timestamp_seconds) converted_date_from_file_time = datetime.datetime(1601, 1, 1) + datetime.timedelta(seconds=timestamp_seconds) print(converted_date_from_file_time) references file times ularge_integer union filetime structure what is dwlowdatetime and dwhighdatetime how to create filetime in win32? htb discussion board ldap, active directory \u0026amp; filetime timestamp converter ","title":"Filetime"},{"date":"2024-05-16","image":"","imageAlt":"","link":"https://hshakilst.github.io/posts/master-file-table/","summary":"What is a Master File Table? The Master File Table (MFT) is a system file in the NTFS file system (having the name $MFT) that stores metadata information about all files and directories on an NTFS volume.","tags":["dfir","file","master","table","windows"],"text":"what is a master file table? the master file table (mft) is a system file in the ntfs file system (having the name $mft) that stores metadata information about all files and directories on an ntfs volume. the mft acts as an index to all the files and directories on the volume, providing quick access to the information needed to retrieve a file.\neach file and directory on an ntfs volume has a unique record in the mft, known as an mft entry. the mft entry contains information such as the file name, timestamps, permissions, and a pointer to the file’s data. the corresponding mft entry is updated when a file is created or modified.\nwhen a file is deleted, the corresponding mft entry is marked as free, but the actual file data remains on the disk until it is overwritten by new data. this can be useful in data recovery scenarios, as the deleted file’s data may still be recoverable. successful data recovery requires that the disk regions occupied by the deleted data are not overwritten.\nnote: the mft is stored on the ntfs volume and is an important component of the ntfs file system. the mft must remain intact and undamaged for the file system to function properly.\nwhy is the mft useful for forensics? comprehensive data storage: the mft provides a detailed record of each file, including timestamps, permissions, and data content locations, making it invaluable for forensic investigations.\nrecovery of deleted files: even when files are deleted, their mft entries might not be immediately reused. this allows forensic analysts to recover details about the deleted files, which can be crucial in legal contexts.\ntracking file modifications: the mft includes multiple timestamps that record different types of file access and modifications. this can help construct a timeline of activities on a system, an essential aspect of forensic analysis.\ndetecting malware and unauthorized access: since the mft records file creation and modification details, unusual changes detected in these entries can indicate unauthorised access or malware activity.\ngeneral structure of mft record the structure of the master file table (mft) in the ntfs file system is complex and consists of multiple records, each of which represents a file or directory on the ntfs volume. each mft record is 1024 bytes, making the mft very simple to parse. an mft record has the following general structure:\nfile record header: this section contains information about the record itself, including the size of the record, the offset of the update sequence, and the flags that indicate the state of the file or directory.\nfile attribute list: this section contains a list of attributes that describe the file or directory, including its name, timestamps, size, and data. each attribute is stored as a separate structure with its format.\ndata runs: this section describes the location of the file or directory’s data on the disk. the data runs are stored as a series of extents describing the starting cluster and the length of each contiguous data block.\nthe exact format and structure of the mft in ntfs can vary depending on the version of the file system in use. however, the general structure remains the same, with the file record header, file attribute list, and data runs being the main components of each mft entry.\nnote: it’s important to note that accessing the mft directly can be dangerous and potentially lead to file system corruption or data loss. before attempting to access or modify the mft, it’s recommended to perform operations on a backup of the mft or back up important data beforehand.\ndetailed breakdown of mft fields $standard_information\ncreation time: the date and time when the file or directory was created. modification time: the date and time when the file or directory was last modified. access time: the date and time when the file or directory was last accessed. entry modified time: the date and time when the mft entry itself was last modified. use case: these timestamps are vital for timeline analysis to determine the sequence of user actions and file usage. $file_name\nfile name: the name of the file or directory. parent directory: the mft record number of the directory in which the file resides. additional timestamps: similar to $standard_information, but specific to this attribute and sometimes used as a fallback. use case: this attribute is used to confirm the integrity of file paths and names in the system, which is crucial for tracking user movements and detecting unauthorised changes. $data\nactual data or pointer: either the data itself for smaller files or a pointer to the data for larger files. use case: direct analysis of file contents and data recovery, especially important in cases involving data theft or unauthorized data manipulation. $logged_utility_stream\ntransactional data: holds data related to transactional ntfs (txf), which logs temporary file state changes. use case: can be used to track changes made during a transaction, useful in cases of system crashes or unexpected shutdowns to determine interim states. $bitmap\ncluster allocation: maps which clusters are in use by the file. use case: useful for recovering deleted files or reconstructing file data from clusters not overwritten by new data. $security_descriptor\nowner id: identifies who owns the file. permissions: details what permissions are attached to the file (who can read, write, execute, etc.). audit settings: specifies what operations (like access or changes) are logged by the system. use case: critical for determining access rights and detecting potential security breaches where permissions may have been altered. $volume_information (specific to the mft entry for the volume itself)\nvolume serial number: unique identifier for the volume. flags: system flags related to the volume, such as whether it’s dirty (improperly unmounted). use case: useful in multi-disk systems to link files and activities to specific volumes, essential in systems recovery and forensic analysis across multiple drives. $index_root and $index_allocation\nindex entries: used in directories to index contained files for quick access. use case: forensically important for reconstructing directory structures and understanding how data was organized and accessed, particularly in complex investigations involving numerous files and directories. timestamps created (0x10) is the standard information (si) creation timestamp. this can be modified by user level processes, for example, timestomping. created (0x30) is the filename (fn) creation timestamp.\ntimestamps of (fn) - behave differently from timestamps of (si). these values don\u0026rsquo;t change or all of the values change at once. however, rename and moved in a local volume are exceptions. these processes are inherited from (si) value then set corresponding (fn) value. for more ntfs timestamps.\nmft resident files files that can be stored directly within the master file table (mft) known as resident files. the size of this kind of files varies depending on the file, the system, and the amount of metadata stored in the mft.\ngenerally, the more metadata associated with a file, the less space remains for storing the file\u0026rsquo;s data itself within the mft. while there is no strict upper limit, typically files smaller than approximately 900 bytes can be fully contained within their mft record.\nreferences geeksforgeeks kazamiya official writeup bft by cyberjunkie \u0026amp; sebh24 on htb ","title":"Master File Table"}]
}

